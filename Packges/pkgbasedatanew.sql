CREATE OR REPLACE PACKAGE PKGBASEDATANEW AS

FUNCTION IN_REFCODE_VALUES (GMAINCODE NUMBER) RETURN VARCHAR2;           
FUNCTION KGBINSTR  (GSTRING  VARCHAR2, GWORDTOCHECK  VARCHAR2) RETURN NUMBER; 

PROCEDURE PROCESS     (GSOLID                       VARCHAR2,
                       CURRENTDAYFLAG               VARCHAR2:= 'Y', 
                       STARTDATE                    DATE:= TRUNC(SYSDATE),
                       ENDDATE                      DATE:= TRUNC(SYSDATE));

END;
/
CREATE OR REPLACE PACKAGE BODY PKGBASEDATANEW IS

FUNCTION IN_REFCODE_VALUES (GMAINCODE NUMBER) RETURN VARCHAR2 IS

    IN_REFCODE_VALUES       VARCHAR2(1000) := '';
    
BEGIN

    FOR CURREC IN (SELECT CODE_DESCRIPTION FROM C_REFCODE WHERE MAIN_CODE = GMAINCODE AND SUB_CODE <> 0 AND DEL_FLAG = 'N')
    LOOP

       IN_REFCODE_VALUES := IN_REFCODE_VALUES || CURREC.CODE_DESCRIPTION || ',';

    END LOOP;
    
    IF IN_REFCODE_VALUES IS NOT NULL THEN

       IN_REFCODE_VALUES := SUBSTR(IN_REFCODE_VALUES, 0, LENGTH(IN_REFCODE_VALUES)-1);
        
    END IF;       
    
    RETURN IN_REFCODE_VALUES; 

EXCEPTION
     WHEN OTHERS THEN
   RETURN '';            

END IN_REFCODE_VALUES;

FUNCTION KGBINSTR (GSTRING          VARCHAR2, GWORDTOCHECK  VARCHAR2) RETURN NUMBER IS

    KGBINSTR          NUMBER(10);

BEGIN

    KGBINSTR := CASE WHEN INSTR('.'||REPLACE(REPLACE(GSTRING,' '),',','.')||'.','.'||GWORDTOCHECK||'.') > 0 THEN 1 ELSE 0 END;
    RETURN KGBINSTR;

EXCEPTION

     WHEN OTHERS THEN
     RETURN 0;

END KGBINSTR;

PROCEDURE PROCESS     (GSOLID                       VARCHAR2,
                       CURRENTDAYFLAG               VARCHAR2:= 'Y', 
                       STARTDATE                    DATE:= TRUNC(SYSDATE),
                       ENDDATE                      DATE:= TRUNC(SYSDATE)) IS

    VARERROR                                        VARCHAR2 (1000):= 'PACKAGE ERROR';
    CURRENTDATE                                     DATE:= PKGSMGBCOMMON.CURRENTWORKINGDAY;
    PROCESSDATE                                     DATE:= PKGBASEDATA.PROCESSDATE(PKGSMGBCOMMON.LASTWORKINGDAY('00000',CURRENTDATE));
    
    BEGINDATE                                       DATE:= PKGSMGBCOMMON.FIRSTDAYOFMONTH(PROCESSDATE);
    QUARTERENDDATE                                  DATE:= PKGSMGBCOMMON.QUARTERENDDATE(PROCESSDATE);
    
    SATURDAY_LASTDAY_FLAG                           VARCHAR2(1):= PKGSMGBCOMMON.SATURDAY_LASTDAY_FLAG;
   
    TEMPCOUNT                                       NUMBER(20,2);
    OLD_RCRE_TIME                                   DATE;

    ONLINEDATE                                      DATE;
    RONAME                                          VARCHAR2(5);
    DTNAME                                          VARCHAR2(5);
    
    TD_SBA                                          VARCHAR2(1000);
    TD_CA                                           VARCHAR2(1000);
    TD_LAA                                          VARCHAR2(1000);
    WEAK_SECTION                                    VARCHAR2(1000);
    EDU_LOAN                                        VARCHAR2(1000);
    LBR_CODES                                       VARCHAR2(1000);
    VSL_LOANS                                       VARCHAR2(1000);
    
    TYPE BD_ACID                                    IS TABLE OF GAM.ACID%TYPE;
    TYPE BD_SOL_ID                                  IS TABLE OF GAM.SOL_ID%TYPE;
    TYPE BD_BACID                                   IS TABLE OF GAM.BACID%TYPE;
    TYPE BD_FORACID                                 IS TABLE OF GAM.FORACID%TYPE;
    TYPE BD_CUST_ID                                 IS TABLE OF GAM.CUST_ID%TYPE;
    TYPE BD_EMP_ID                                  IS TABLE OF GAM.EMP_ID%TYPE;
    TYPE BD_GL_SUB_HEAD_CODE                        IS TABLE OF GAM.GL_SUB_HEAD_CODE%TYPE;
    TYPE BD_ACCT_OWNERSHIP                          IS TABLE OF GAM.ACCT_OWNERSHIP%TYPE;
    TYPE BD_SCHM_CODE                               IS TABLE OF GAM.SCHM_CODE%TYPE;
    TYPE BD_SCHM_TYPE                               IS TABLE OF GAM.SCHM_TYPE%TYPE;
    TYPE BD_NEW_SCHM_TYPE                           IS TABLE OF GAM.SCHM_TYPE%TYPE;
    TYPE BD_FREZ_CODE                               IS TABLE OF GAM.FREZ_CODE%TYPE;
    TYPE BD_ACCT_OPN_DATE                           IS TABLE OF GAM.ACCT_OPN_DATE%TYPE;
    TYPE BD_ACCT_CLS_DATE                           IS TABLE OF GAM.ACCT_CLS_DATE%TYPE;
    TYPE BD_CLR_BAL_AMT                             IS TABLE OF GAM.CLR_BAL_AMT%TYPE;
    TYPE BD_UN_CLR_BAL_AMT                          IS TABLE OF GAM.UN_CLR_BAL_AMT%TYPE;
    TYPE BD_SANCT_LIM                               IS TABLE OF GAM.SANCT_LIM%TYPE;
    TYPE BD_PARTITIONED_FLG                         IS TABLE OF GAM.PARTITIONED_FLG%TYPE;
    TYPE BD_PARTITIONED_TYPE                        IS TABLE OF GAM.PARTITIONED_TYPE%TYPE;
    TYPE BD_GL_CODE                                 IS TABLE OF GSH.GL_CODE%TYPE;
    TYPE BD_INTEREST_RATE                           IS TABLE OF GAM.DR_BAL_LIM%TYPE;
    TYPE BD_DUE_DATE                                IS TABLE OF GAM.ACCT_OPN_DATE%TYPE;
    TYPE BD_NPA_MAIN                                IS TABLE OF GAM.SCHM_CODE%TYPE;
    TYPE BD_NPA_SUB                                 IS TABLE OF GAM.SCHM_CODE%TYPE;
    TYPE BD_INT_SUSPENSE                            IS TABLE OF GAM.CLR_BAL_AMT%TYPE;
    TYPE BD_BOOK_BALANCE                            IS TABLE OF GAM.CLR_BAL_AMT%TYPE;   
    TYPE BD_NET_BALANCE                             IS TABLE OF GAM.CLR_BAL_AMT%TYPE;   
    TYPE BD_BSCHM_CODE                              IS TABLE OF C_MISLINKAGE.BSCHEMECODE%TYPE;
    TYPE BD_PURPOSE                                 IS TABLE OF GAM.SCHM_CODE%TYPE;
    TYPE BD_SPECIAL_PROGRAMME                       IS TABLE OF GAM.SCHM_CODE%TYPE;
    TYPE BD_LBR_FIRST_DIGIT_CODE                    IS TABLE OF GAM.SCHM_CODE%TYPE;   
    TYPE BD_GUARANTEE_COVER_CODE                    IS TABLE OF GAM.SCHM_CODE%TYPE;   
    TYPE BD_CUST_NAME                               IS TABLE OF CMG.CUST_NAME%TYPE;
    TYPE BD_GENDER                                  IS TABLE OF CMG.CUST_SEX%TYPE;
    TYPE BD_CASTE                                   IS TABLE OF CMG.CUST_CASTE_CODE%TYPE;
    TYPE BD_RELIGION                                IS TABLE OF CMG.CUST_COMMU_CODE%TYPE;
    TYPE BD_CUSTOMERTYPE                            IS TABLE OF CMG.CUST_TYPE_CODE%TYPE;
    TYPE BD_CONSTITUTION                            IS TABLE OF CMG.CUST_CONST%TYPE;
    TYPE BD_MAIN_PURPOSE_CODE                       IS TABLE OF C_MIS.MAIN_PURPOSE_CODE%TYPE;
    TYPE BD_SECTOR_CODE                             IS TABLE OF C_MIS.SECTOR_CODE%TYPE;
    TYPE BD_SUBSECTOR_CODE                          IS TABLE OF C_MIS.SUBSECTOR_CODE%TYPE;
    TYPE BD_SME_SECTOR_CODE                         IS TABLE OF C_MIS.SME_SECTOR_CODE%TYPE;
    TYPE BD_SME_SUB_SECTOR_CODE                     IS TABLE OF C_MIS.SME_SUB_SECTOR_CODE%TYPE;
    TYPE BD_TERM_CODE                               IS TABLE OF C_MIS.TERM_CODE%TYPE;
    TYPE BD_LBR_SECTOR_CODE                         IS TABLE OF C_MIS.LBR_SECTOR_CODE%TYPE;
    TYPE BD_LBR_ACTIVITY_CODE                       IS TABLE OF C_MIS.LBR_ACTIVITY_CODE%TYPE;
    TYPE BD_LBR_TYPE_OF_UNIT                        IS TABLE OF C_MIS.LBR_TYPE_OF_UNIT%TYPE;
    TYPE BD_LBR_3RD_DIGIT_CODE                      IS TABLE OF C_MIS.LBR_3RD_DIGIT_CODE%TYPE;
    TYPE BD_BSR_OCCUPATION_CODE                     IS TABLE OF C_MIS.BSR_OCCUPATION_CODE%TYPE;
    TYPE BD_BSR_BORROWER_CODE                       IS TABLE OF C_MIS.BSR_BORROWER_CODE%TYPE;
    TYPE BD_BSR_ITEM_CODE                           IS TABLE OF C_MIS.BSR_ITEM_CODE%TYPE;
    TYPE BD_BSR_TYPE_ACCOUNT_CODE                   IS TABLE OF C_MIS.BSR_TYPE_ACCOUNT_CODE%TYPE;
    TYPE BD_PERIODMM                                IS TABLE OF LAM.REP_PERD_MTHS%TYPE;
    TYPE BD_SUBSIDY                                 IS TABLE OF C_MISONLINEDATE.ITRANDRCUST%TYPE;
    TYPE BD_EFF_BALANCE                             IS TABLE OF C_MISONLINEDATE.ITRANDRCUST%TYPE;
    TYPE BD_INSURANCE_CLAIM                         IS TABLE OF C_MISONLINEDATE.ITRANDRCUST%TYPE;
    TYPE BD_CGTMSE_CLAIM                            IS TABLE OF C_MISONLINEDATE.ITRANDRCUST%TYPE;
    TYPE BD_BAL_NET_OFF_SUBSIDY_CLAIMS              IS TABLE OF C_MISONLINEDATE.ITRANDRCUST%TYPE;
    TYPE BD_SECURITYVALUE                           IS TABLE OF C_MISONLINEDATE.ITRANDRCUST%TYPE;
    TYPE BD_CGTMSE_GUARANTEE_COVER                  IS TABLE OF C_MISONLINEDATE.ITRANDRCUST%TYPE;
    TYPE BD_BAL_UNCOVERED                           IS TABLE OF C_MISONLINEDATE.ITRANDRCUST%TYPE;
    TYPE BD_NPA_PROVISION                           IS TABLE OF C_MISONLINEDATE.ITRANDRCUST%TYPE;
    TYPE BD_KCCSCHEME                               IS TABLE OF C_MISLINKAGE.KCCSCHEME%TYPE;
    TYPE BD_GOLDSCHEME                              IS TABLE OF C_MISLINKAGE.GOLDSCHEME%TYPE;
    TYPE BD_CCODSCHEME                              IS TABLE OF C_MISLINKAGE.CCODSCHEME%TYPE;
    TYPE BD_VSLSCHEME                               IS TABLE OF C_MISLINKAGE.VSLSCHEME%TYPE;
    TYPE BD_REPHASEDSCHEME                          IS TABLE OF C_MISLINKAGE.REPHASEDSCHEME%TYPE;
    TYPE BD_DISBURSMENT                             IS TABLE OF C_MISONLINEDATE.SOLNAME%TYPE;
    TYPE BD_DISBURSMENT_NO                          IS TABLE OF C_MISONLINEDATE.ITRANDRCUST%TYPE;
    TYPE BD_DISBURSMENT_AMT                         IS TABLE OF C_MISONLINEDATE.ITRANDRCUST%TYPE;
    TYPE BD_DEMAND_AMOUNT                           IS TABLE OF C_MISONLINEDATE.ITRANDRCUST%TYPE;
    TYPE BD_RECOVERY_AMOUNT                         IS TABLE OF C_MISONLINEDATE.ITRANDRCUST%TYPE;
    TYPE BD_OVERDUE_NO                              IS TABLE OF C_MISONLINEDATE.ITRANDRCUST%TYPE;
    TYPE BD_OVERDUE_AMOUNT                          IS TABLE OF C_MISONLINEDATE.ITRANDRCUST%TYPE;
    TYPE BD_ACCT_CLS_FLG                            IS TABLE OF GAM.ACCT_CLS_FLG%TYPE;
    TYPE BD_DATE_OF_NPA                             IS TABLE OF GAM.ACCT_OPN_DATE%TYPE;
    TYPE BD_ACCT_STATUS                             IS TABLE OF SMT.ACCT_STATUS%TYPE;
    TYPE BD_TD_PERIODMM                             IS TABLE OF TAM.DEPOSIT_PERIOD_MTHS%TYPE;
    TYPE BD_TD_PERIODDD                             IS TABLE OF TAM.DEPOSIT_PERIOD_MTHS%TYPE;
    TYPE BD_TD_OPEN_EFFECTIVE_DATE                  IS TABLE OF GAM.ACCT_OPN_DATE%TYPE;
    TYPE BD_TD_MATURITY_DATE                        IS TABLE OF GAM.ACCT_OPN_DATE%TYPE;
    TYPE BD_TD_CONVERTED_PERIOD_TYPE                IS TABLE OF TAM.AGENT_CODE%TYPE;
    TYPE BD_TD_CONVERTED_PERIOD                     IS TABLE OF C_MISONLINEDATE.ITRANDRCUST%TYPE;
    TYPE BD_DEP_PREFERENTIAL_RATE                   IS TABLE OF GAM.DR_BAL_LIM%TYPE;
    TYPE BD_DEP_INTEREST                            IS TABLE OF GAM.FORACID%TYPE;
    TYPE BD_OPEN_COUNT                              IS TABLE OF C_MISONLINEDATE.ITRANDRCUST%TYPE;
    TYPE BD_OPEN_AMOUNT                             IS TABLE OF C_MISONLINEDATE.ITRANDRCUST%TYPE;
    TYPE BD_CLOSE_COUNT                             IS TABLE OF C_MISONLINEDATE.ITRANDRCUST%TYPE;   
    TYPE BD_CLOSE_AMOUNT                            IS TABLE OF C_MISONLINEDATE.ITRANDRCUST%TYPE;   
    TYPE BD_WEAKER_SECTION                          IS TABLE OF C_MISLINKAGE.KCCSCHEME%TYPE;   
    TYPE BD_NAT_ID_CARD_NUM                         IS TABLE OF CMG.NAT_ID_CARD_NUM%TYPE;
    TYPE BD_PSPRT_NUM                               IS TABLE OF CMG.PSPRT_NUM%TYPE;
    TYPE BD_PSPRT_DET                               IS TABLE OF CMG.PSPRT_DET%TYPE;
    TYPE BD_FREE_TEXT_5                             IS TABLE OF CMG.FREE_TEXT_5%TYPE;
    TYPE BD_PRIMARY_SOL_ID                          IS TABLE OF CMG.PRIMARY_SOL_ID%TYPE;
    TYPE BD_PAN_GIR_NUM                             IS TABLE OF CMG.PAN_GIR_NUM%TYPE;
    TYPE BD_CUST_PAGER_NO                           IS TABLE OF CMG.CUST_PAGER_NO%TYPE;
    TYPE BD_FREE_CODE_1                             IS TABLE OF CEM.FREE_CODE_1%TYPE;
    TYPE BD_FREE_CODE_4                             IS TABLE OF CEM.FREE_CODE_4%TYPE;
    TYPE BD_NPA_REASON                              IS TABLE OF C_SPECIALINFO3.SI1_NPAREASON%TYPE;
    TYPE BD_CRITICAL_AMOUNT                         IS TABLE OF C_SPECIALINFO3.SI1_CRITICALAMOUNT%TYPE;
    TYPE BD_INDICATIVE_NPA_DATE                     IS TABLE OF C_SPECIALINFO3.SI1_INDICATIVENPADATE%TYPE;
    TYPE BD_LOAN_REST                               IS TABLE OF C_SPECIALINFO3.SI1_LOANREST%TYPE;
    TYPE BD_NPA_FLAG                                IS TABLE OF C_SPECIALINFO3.SI1_NPAFLAG%TYPE;
    TYPE BD_NPA_MAIN_OLD                            IS TABLE OF GAM.SCHM_CODE%TYPE;
    TYPE BD_NPA_SUB_OLD                             IS TABLE OF GAM.SCHM_CODE%TYPE;
    TYPE BD_AOD_DUE_DATE                            IS TABLE OF GAM.ACCT_OPN_DATE%TYPE;
    TYPE BD_LOANREST                                IS TABLE OF C_SPECIALINFO3.SI1_LOANREST%TYPE;
    TYPE BD_OVER_FLOW                               IS TABLE OF C_SPECIALINFO3.SI1_OVERFLOW%TYPE;
    TYPE BD_SCHEDULENO                              IS TABLE OF LDT.SHDL_NUM%TYPE;
    TYPE BD_NPACODE                                 IS TABLE OF C_MIS.NPA_CODE%TYPE;
    TYPE BD_STOCKSCHEME                             IS TABLE OF C_MISLINKAGE.STOCKSCHEME%TYPE;
    TYPE BD_SMS_ENROLLED                            IS TABLE OF GAM.ACCT_OWNERSHIP%TYPE; 
    TYPE BD_ATM_CARD_PERSONALISED                   IS TABLE OF GAM.ACCT_OWNERSHIP%TYPE; 
    TYPE BD_ATM_CARD_NONPERSONALISED                IS TABLE OF GAM.ACCT_OWNERSHIP%TYPE; 
    TYPE BD_ATM_CARD_KCC                            IS TABLE OF GAM.ACCT_OWNERSHIP%TYPE; 
    TYPE BD_VBS_ADD_DATA_FLAG                       IS TABLE OF GAM.ACCT_OWNERSHIP%TYPE; 
    TYPE BD_LOCATION_STATUS                         IS TABLE OF CMG.CUST_NAME%TYPE; 
    TYPE BD_SIGNATURE_STATUS                        IS TABLE OF GAM.ACCT_OWNERSHIP%TYPE; 
    TYPE BD_KYC_FLAG                                IS TABLE OF CMG.CUST_NAME%TYPE; 
    TYPE BD_NPA_INOUT_FLAG                          IS TABLE OF GAM.ACCT_OWNERSHIP%TYPE; 
    TYPE BD_NPA_OUT_CLOSED_BAL                      IS TABLE OF C_SPECIALINFO3.SI1_CRITICALAMOUNT%TYPE;
    TYPE BD_SW_FLAG                                 IS TABLE OF C_SPECIALINFO3.SI1_NPAFLAG%TYPE;
    TYPE BD_SW_REASON                               IS TABLE OF C_SPECIALINFO3.SI1_NPAREASON%TYPE;
    TYPE BD_SW_CRITICALAMOUNT                       IS TABLE OF C_SPECIALINFO3.SI1_CRITICALAMOUNT%TYPE;
    TYPE BD_DATE_OF_BIRTH                           IS TABLE OF CMG.DATE_OF_BIRTH%TYPE;
    TYPE BD_MIN_DEMAND_DATE                         IS TABLE OF CMG.DATE_OF_BIRTH%TYPE;
    TYPE BD_INT_ON_IDMD_FLG                         IS TABLE OF LAM.INT_ON_IDMD_FLG%TYPE;
    TYPE BD_LR_FREQ_TYPE                            IS TABLE OF LRS.LR_FREQ_TYPE%TYPE;
    TYPE BD_NUM_OF_FLOWS                            IS TABLE OF LRS.NUM_OF_FLOWS%TYPE;
    TYPE BD_FLOW_START_DATE                         IS TABLE OF LRS.FLOW_START_DATE%TYPE;
    TYPE BD_FLOW_AMT                                IS TABLE OF LRS.FLOW_AMT%TYPE;
    TYPE BD_LR_INT_FREQ_TYPE                        IS TABLE OF LRS.LR_INT_FREQ_TYPE%TYPE;
    TYPE BD_INTEREST_CALC_UPTO_DATE_CR              IS TABLE OF EIT.INTEREST_CALC_UPTO_DATE_CR%TYPE;
    TYPE BD_INTEREST_CALC_UPTO_DATE_DR              IS TABLE OF EIT.INTEREST_CALC_UPTO_DATE_DR%TYPE;
    TYPE BD_NEXT_INT_RUN_DATE_CR                    IS TABLE OF EIT.NEXT_INT_RUN_DATE_CR%TYPE;
    TYPE BD_NEXT_INT_RUN_DATE_DR                    IS TABLE OF EIT.NEXT_INT_RUN_DATE_DR%TYPE;
    TYPE BD_LIEN_ACID                               IS TABLE OF SDR.LIEN_ACID%TYPE;
    TYPE BD_REP_SHDL_DATE                           IS TABLE OF LAM.REP_SHDL_DATE%TYPE;
    TYPE BD_EI_PERD_END_DATE                        IS TABLE OF LAM.EI_PERD_END_DATE%TYPE;
    TYPE BD_MOB_BANK_ENROLLMENT                     IS TABLE OF GAM.ACCT_OWNERSHIP%TYPE; 
    TYPE BD_QE_LAA_CRITICALAMOUNT                   IS TABLE OF C_BASEDATA.QE_LAA_CRITICALAMOUNT %TYPE;
    TYPE BD_QE_LAA_REASON                           IS TABLE OF C_BASEDATA.QE_LAA_REASON%TYPE;
    TYPE BD_SI1_OUTSTANDING                         IS TABLE OF C_SPECIALINFO3.SI1_OUTSTANDING%TYPE;
    TYPE BD_DEPOSIT_AMOUNT                          IS TABLE OF C_SPECIALINFO3.SI1_OUTSTANDING%TYPE;
    TYPE BD_PMJDY_FLAG                              IS TABLE OF VARCHAR2(1);
       
    ACID                                            BD_ACID;
    SOL_ID                                          BD_SOL_ID;
    BACID                                           BD_BACID;
    FORACID                                         BD_FORACID;
    CUST_ID                                         BD_CUST_ID;
    EMP_ID                                          BD_EMP_ID;
    GL_SUB_HEAD_CODE                                BD_GL_SUB_HEAD_CODE;
    ACCT_OWNERSHIP                                  BD_ACCT_OWNERSHIP;
    SCHM_CODE                                       BD_SCHM_CODE;
    SCHM_TYPE                                       BD_SCHM_TYPE;
    FREZ_CODE                                       BD_FREZ_CODE;
    ACCT_OPN_DATE                                   BD_ACCT_OPN_DATE;
    ACCT_CLS_DATE                                   BD_ACCT_CLS_DATE;
    CLR_BAL_AMT                                     BD_CLR_BAL_AMT;
    UN_CLR_BAL_AMT                                  BD_UN_CLR_BAL_AMT;
    SANCT_LIM                                       BD_SANCT_LIM;
    PARTITIONED_FLG                                 BD_PARTITIONED_FLG;
    PARTITIONED_TYPE                                BD_PARTITIONED_TYPE;
    GL_CODE                                         BD_GL_CODE;
    INTEREST_RATE                                   BD_INTEREST_RATE;
    NEW_SCHM_TYPE                                   BD_NEW_SCHM_TYPE;       
    DUE_DATE                                        BD_DUE_DATE;
    NPA_MAIN                                        BD_NPA_MAIN;
    NPA_SUB                                         BD_NPA_SUB;
    INT_SUSPENSE                                    BD_INT_SUSPENSE;
    BOOK_BALANCE                                    BD_BOOK_BALANCE;
    NET_BALANCE                                     BD_NET_BALANCE;
    BSCHM_CODE                                      BD_BSCHM_CODE;
    PURPOSE                                         BD_PURPOSE;
    SPECIAL_PROGRAMME                               BD_SPECIAL_PROGRAMME;
    LBR_FIRST_DIGIT_CODE                            BD_LBR_FIRST_DIGIT_CODE;
    GUARANTEE_COVER_CODE                            BD_GUARANTEE_COVER_CODE;
    CUST_NAME                                       BD_CUST_NAME;
    GENDER                                          BD_GENDER;
    CASTE                                           BD_CASTE;
    RELIGION                                        BD_RELIGION;
    CUSTOMERTYPE                                    BD_CUSTOMERTYPE;
    CONSTITUTION                                    BD_CONSTITUTION;
    MAIN_PURPOSE_CODE                               BD_MAIN_PURPOSE_CODE;        
    SECTOR_CODE                                     BD_SECTOR_CODE;       
    SUBSECTOR_CODE                                  BD_SUBSECTOR_CODE;
    SME_SECTOR_CODE                                 BD_SME_SECTOR_CODE;
    SME_SUB_SECTOR_CODE                             BD_SME_SUB_SECTOR_CODE;
    TERM_CODE                                       BD_TERM_CODE;
    LBR_SECTOR_CODE                                 BD_LBR_SECTOR_CODE;
    LBR_ACTIVITY_CODE                               BD_LBR_ACTIVITY_CODE;
    LBR_TYPE_OF_UNIT                                BD_LBR_TYPE_OF_UNIT;
    LBR_3RD_DIGIT_CODE                              BD_LBR_3RD_DIGIT_CODE;
    BSR_OCCUPATION_CODE                             BD_BSR_OCCUPATION_CODE;
    BSR_BORROWER_CODE                               BD_BSR_BORROWER_CODE;
    BSR_ITEM_CODE                                   BD_BSR_ITEM_CODE;
    BSR_TYPE_ACCOUNT_CODE                           BD_BSR_TYPE_ACCOUNT_CODE;    
    PERIODMM                                        BD_PERIODMM;
    SUBSIDY                                         BD_SUBSIDY;
    EFF_BALANCE                                     BD_EFF_BALANCE;
    INSURANCE_CLAIM                                 BD_INSURANCE_CLAIM;
    CGTMSE_CLAIM                                    BD_CGTMSE_CLAIM;
    BAL_NET_OFF_SUBSIDY_CLAIMS                      BD_BAL_NET_OFF_SUBSIDY_CLAIMS;
    SECURITYVALUE                                   BD_SECURITYVALUE;
    CGTMSE_GUARANTEE_COVER                          BD_CGTMSE_GUARANTEE_COVER;   
    BAL_UNCOVERED                                   BD_BAL_UNCOVERED;  
    NPA_PROVISION                                   BD_NPA_PROVISION;
    KCCSCHEME                                       BD_KCCSCHEME;
    GOLDSCHEME                                      BD_GOLDSCHEME;
    CCODSCHEME                                      BD_CCODSCHEME;
    VSLSCHEME                                       BD_VSLSCHEME;
    REPHASEDSCHEME                                  BD_REPHASEDSCHEME;
    DISBURSMENT                                     BD_DISBURSMENT;
    DISBURSMENT_NO                                  BD_DISBURSMENT_NO;
    DISBURSMENT_AMT                                 BD_DISBURSMENT_AMT;
    DEMAND_AMOUNT                                   BD_DEMAND_AMOUNT;
    RECOVERY_AMOUNT                                 BD_RECOVERY_AMOUNT;
    OVERDUE_NO                                      BD_OVERDUE_NO;
    OVERDUE_AMOUNT                                  BD_OVERDUE_AMOUNT;
    ACCT_CLS_FLG                                    BD_ACCT_CLS_FLG;                        
    DATE_OF_NPA                                     BD_DATE_OF_NPA;
    ACCT_STATUS                                     BD_ACCT_STATUS;
    TD_PERIODMM                                     BD_TD_PERIODMM;
    TD_PERIODDD                                     BD_TD_PERIODDD;
    TD_OPEN_EFFECTIVE_DATE                          BD_TD_OPEN_EFFECTIVE_DATE;
    TD_MATURITY_DATE                                BD_TD_MATURITY_DATE;
    TD_CONVERTED_PERIOD_TYPE                        BD_TD_CONVERTED_PERIOD_TYPE;
    TD_CONVERTED_PERIOD                             BD_TD_CONVERTED_PERIOD;
    DEP_PREFERENTIAL_RATE                           BD_DEP_PREFERENTIAL_RATE;
    DEP_INTEREST                                    BD_DEP_INTEREST;
    OPEN_COUNT                                      BD_OPEN_COUNT;
    OPEN_AMOUNT                                     BD_OPEN_AMOUNT;
    CLOSE_COUNT                                     BD_CLOSE_COUNT;
    CLOSE_AMOUNT                                    BD_CLOSE_AMOUNT;
    WEAKER_SECTION                                  BD_WEAKER_SECTION;
    NAT_ID_CARD_NUM                                 BD_NAT_ID_CARD_NUM;
    PSPRT_NUM                                       BD_PSPRT_NUM;
    PSPRT_DET                                       BD_PSPRT_DET;
    FREE_TEXT_5                                     BD_FREE_TEXT_5;
    PRIMARY_SOL_ID                                  BD_PRIMARY_SOL_ID;
    PAN_GIR_NUM                                     BD_PAN_GIR_NUM;
    CUST_PAGER_NO                                   BD_CUST_PAGER_NO;
    FREE_CODE_1                                     BD_FREE_CODE_1;
    FREE_CODE_4                                     BD_FREE_CODE_4;
    NPA_REASON                                      BD_NPA_REASON;
    CRITICAL_AMOUNT                                 BD_CRITICAL_AMOUNT;
    INDICATIVE_NPA_DATE                             BD_INDICATIVE_NPA_DATE;
    LOAN_REST                                       BD_LOAN_REST;
    NPA_FLAG                                        BD_NPA_FLAG;
    NPA_MAIN_OLD                                    BD_NPA_MAIN_OLD;
    NPA_SUB_OLD                                     BD_NPA_SUB_OLD;
    AOD_DUE_DATE                                    BD_AOD_DUE_DATE;
    LOANREST                                        BD_LOANREST;
    OVER_FLOW                                       BD_OVER_FLOW;
    SCHEDULENO                                      BD_SCHEDULENO;
    NPACODE                                         BD_NPACODE;
    STOCKSCHEME                                     BD_STOCKSCHEME;
    SMS_ENROLLED                                    BD_SMS_ENROLLED;
    ATM_CARD_PERSONALISED                           BD_ATM_CARD_PERSONALISED;
    ATM_CARD_NONPERSONALISED                        BD_ATM_CARD_NONPERSONALISED;
    ATM_CARD_KCC                                    BD_ATM_CARD_KCC;
    VBS_ADD_DATA_FLAG                               BD_VBS_ADD_DATA_FLAG;
    LOCATION_STATUS                                 BD_LOCATION_STATUS;
    SIGNATURE_STATUS                                BD_SIGNATURE_STATUS;
    KYC_FLAG                                        BD_KYC_FLAG;
    NPA_INOUT_FLAG                                  BD_NPA_INOUT_FLAG;   
    NPA_OUT_CLOSED_BAL                              BD_NPA_OUT_CLOSED_BAL;
    SW_FLAG                                         BD_SW_FLAG;
    SW_REASON                                       BD_SW_REASON;
    SW_CRITICALAMOUNT                               BD_SW_CRITICALAMOUNT;
    DATE_OF_BIRTH                                   BD_DATE_OF_BIRTH;
    MIN_DEMAND_DATE                                 BD_MIN_DEMAND_DATE;               
    INT_ON_IDMD_FLG                                 BD_INT_ON_IDMD_FLG;
    LR_FREQ_TYPE                                    BD_LR_FREQ_TYPE;
    NUM_OF_FLOWS                                    BD_NUM_OF_FLOWS;
    FLOW_START_DATE                                 BD_FLOW_START_DATE;
    FLOW_AMT                                        BD_FLOW_AMT;
    LR_INT_FREQ_TYPE                                BD_LR_INT_FREQ_TYPE;
    INTEREST_CALC_UPTO_DATE_CR                      BD_INTEREST_CALC_UPTO_DATE_CR;
    INTEREST_CALC_UPTO_DATE_DR                      BD_INTEREST_CALC_UPTO_DATE_DR;
    NEXT_INT_RUN_DATE_CR                            BD_NEXT_INT_RUN_DATE_CR;
    NEXT_INT_RUN_DATE_DR                            BD_NEXT_INT_RUN_DATE_DR;
    LIEN_ACID                                       BD_LIEN_ACID;
    REP_SHDL_DATE                                   BD_REP_SHDL_DATE;
    EI_PERD_END_DATE                                BD_EI_PERD_END_DATE;
    MOB_BANK_ENROLLMENT                             BD_MOB_BANK_ENROLLMENT;  
    QE_LAA_CRITICALAMOUNT                           BD_QE_LAA_CRITICALAMOUNT;
    QE_LAA_REASON                                   BD_QE_LAA_REASON;
    SI1_OUTSTANDING                                 BD_SI1_OUTSTANDING;
    DEPOSIT_AMOUNT                                  BD_DEPOSIT_AMOUNT;
    PMJDY_FLAG                                      BD_PMJDY_FLAG;

    CURSOR ACCOUNTS_CDF_Y IS
    SELECT ACID,SOL_ID,BACID,FORACID,CUST_ID,EMP_ID,GL_SUB_HEAD_CODE,ACCT_OWNERSHIP,SCHM_CODE,SCHM_TYPE,FREZ_CODE,ACCT_OPN_DATE,ACCT_CLS_DATE,
           CLR_BAL_AMT,UN_CLR_BAL_AMT,SANCT_LIM,PARTITIONED_FLG,PARTITIONED_TYPE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,ACCT_CLS_FLG,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,
           NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
      FROM GAM
     WHERE SOL_ID = GSOLID
       AND (ACCT_CLS_FLG <>'Y' OR ACCT_CLS_DATE IS NULL OR ACCT_CLS_DATE >= BEGINDATE)
       AND DEL_FLG <> 'Y';

    CURSOR ACCOUNTS_CDF_N IS
    SELECT ACID,SOL_ID,BACID,FORACID,CUST_ID,EMP_ID,GL_SUB_HEAD_CODE,ACCT_OWNERSHIP,SCHM_CODE,SCHM_TYPE,FREZ_CODE,ACCT_OPN_DATE,ACCT_CLS_DATE,
           CLR_BAL_AMT,UN_CLR_BAL_AMT,SANCT_LIM,PARTITIONED_FLG,PARTITIONED_TYPE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,ACCT_CLS_FLG,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,
           NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
      FROM GAM
     WHERE SOL_ID = GSOLID
       AND ACCT_OPN_DATE <= PROCESSDATE
       AND (ACCT_CLS_FLG <>'Y' OR ACCT_CLS_DATE IS NULL OR ACCT_CLS_DATE >= BEGINDATE)
       AND NOT EXISTS (SELECT 1
                         FROM AMHT
                        WHERE AMHT.ACID = GAM.ACID
                          AND PROCESSDATE BETWEEN AMHT.FROMDATE AND AMHT.TODATE
                          AND AMHT.TODATE IS NOT NULL)
       AND DEL_FLG <> 'Y'
     UNION
    SELECT GAM.ACID,AMHT.SOL_ID,GAM.BACID,AMHT.FORACID,GAM.CUST_ID,GAM.EMP_ID,AMHT.GL_SUB_HEAD_CODE,GAM.ACCT_OWNERSHIP,AMHT.SCHM_CODE,GAM.SCHM_TYPE,GAM.FREZ_CODE,GAM.ACCT_OPN_DATE,GAM.ACCT_CLS_DATE,
           GAM.CLR_BAL_AMT,GAM.UN_CLR_BAL_AMT,GAM.SANCT_LIM,GAM.PARTITIONED_FLG,GAM.PARTITIONED_TYPE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,GAM.ACCT_CLS_FLG,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,
           NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
      FROM GAM,AMHT
     WHERE GAM.ACID = AMHT.ACID
       AND AMHT.SOL_ID = GSOLID
       AND ACCT_OPN_DATE <= PROCESSDATE
       AND PROCESSDATE BETWEEN  AMHT.FROMDATE AND AMHT.TODATE
       AND AMHT.TODATE IS NOT NULL
       AND (ACCT_CLS_FLG <>'Y' OR ACCT_CLS_DATE IS NULL OR ACCT_CLS_DATE >= BEGINDATE)
       AND DEL_FLG <> 'Y';

    CURSOR BILLSPURCHASED IS
    SELECT BILL_B2K_ID,SOL_ID,NULL,BILL_ID,LOGR_CUST_ID,NULL,NULL,NULL,NULL,NULL,NULL,LODG_DATE,
           CLS_DATE,NULL,NULL,BILL_AMT,NULL,NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,
           NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'N'
      FROM BLT
     WHERE SOL_ID = GSOLID 
       AND LODG_DATE <= PROCESSDATE
       AND (CLS_DATE IS NULL OR CLS_DATE  >= BEGINDATE)  
       AND BP_ACID IN (SELECT ACID FROM GAM WHERE BACID = '22090001' AND ACCT_CRNCY_CODE = 'INR' AND SOL_ID = GSOLID)
       AND DEL_FLG = 'N';

BEGIN

    TD_SBA       := IN_REFCODE_VALUES(1051);
    TD_CA        := IN_REFCODE_VALUES(1050);
    TD_LAA       := IN_REFCODE_VALUES(1086);
    WEAK_SECTION := IN_REFCODE_VALUES(1083);
    EDU_LOAN     := IN_REFCODE_VALUES(1085);
    LBR_CODES    := IN_REFCODE_VALUES(1084);
    VSL_LOANS    := IN_REFCODE_VALUES(1102);
    
    SELECT ONLINEDATE2,RONAME,DTNAME
      INTO ONLINEDATE,RONAME,DTNAME
      FROM C_MISONLINEDATE
     WHERE SOLID2 = GSOLID;

    IF CURRENTDAYFLAG <> 'Y' THEN

        BEGINDATE                       := STARTDATE;
        PROCESSDATE                     := ENDDATE;

    END IF;

    DELETE FROM C_TEMPDATA WHERE TD_PROCESSID = 'BD1' AND TD_SOLID = GSOLID;
    COMMIT;
    
    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),1 FROM DUAL;
    COMMIT;
   
    IF CURRENTDAYFLAG = 'Y' THEN

        OPEN ACCOUNTS_CDF_Y;

    ELSE

        OPEN ACCOUNTS_CDF_N;

    END IF;

    LOOP

        IF CURRENTDAYFLAG = 'Y' THEN

            FETCH ACCOUNTS_CDF_Y BULK COLLECT
             INTO ACID,SOL_ID,BACID,FORACID,CUST_ID,EMP_ID,GL_SUB_HEAD_CODE,ACCT_OWNERSHIP,SCHM_CODE,SCHM_TYPE,FREZ_CODE,ACCT_OPN_DATE,
                  ACCT_CLS_DATE,CLR_BAL_AMT,UN_CLR_BAL_AMT,SANCT_LIM,PARTITIONED_FLG,PARTITIONED_TYPE,GL_CODE,NEW_SCHM_TYPE,INTEREST_RATE,DUE_DATE,
                  NPA_MAIN,NPA_SUB,INT_SUSPENSE,BOOK_BALANCE,NET_BALANCE,BSCHM_CODE,PURPOSE,SPECIAL_PROGRAMME,LBR_FIRST_DIGIT_CODE,GUARANTEE_COVER_CODE,
                  CUST_NAME,GENDER,CASTE,RELIGION,CUSTOMERTYPE,CONSTITUTION,
                  MAIN_PURPOSE_CODE,SECTOR_CODE,SUBSECTOR_CODE,SME_SECTOR_CODE,SME_SUB_SECTOR_CODE,TERM_CODE,LBR_SECTOR_CODE,LBR_ACTIVITY_CODE,
                  LBR_TYPE_OF_UNIT,LBR_3RD_DIGIT_CODE,BSR_OCCUPATION_CODE,BSR_BORROWER_CODE,BSR_ITEM_CODE,BSR_TYPE_ACCOUNT_CODE,
                  PERIODMM,SUBSIDY,EFF_BALANCE,INSURANCE_CLAIM,CGTMSE_CLAIM,BAL_NET_OFF_SUBSIDY_CLAIMS,SECURITYVALUE,CGTMSE_GUARANTEE_COVER,BAL_UNCOVERED,NPA_PROVISION,
                  KCCSCHEME,GOLDSCHEME,CCODSCHEME,VSLSCHEME,REPHASEDSCHEME,DISBURSMENT,DISBURSMENT_NO,DISBURSMENT_AMT,DEMAND_AMOUNT,
                  RECOVERY_AMOUNT,OVERDUE_NO,OVERDUE_AMOUNT,ACCT_CLS_FLG,DATE_OF_NPA,
                  ACCT_STATUS,TD_PERIODMM,TD_PERIODDD,TD_OPEN_EFFECTIVE_DATE,TD_MATURITY_DATE,TD_CONVERTED_PERIOD_TYPE,TD_CONVERTED_PERIOD,
                  DEP_PREFERENTIAL_RATE,DEP_INTEREST,
                  OPEN_COUNT,OPEN_AMOUNT,CLOSE_COUNT,CLOSE_AMOUNT,WEAKER_SECTION,
                  NAT_ID_CARD_NUM,PSPRT_NUM,PSPRT_DET,FREE_TEXT_5,PRIMARY_SOL_ID,PAN_GIR_NUM,CUST_PAGER_NO,FREE_CODE_1,FREE_CODE_4,
                  NPA_REASON,CRITICAL_AMOUNT,INDICATIVE_NPA_DATE,LOAN_REST,NPA_FLAG,NPA_MAIN_OLD,NPA_SUB_OLD,AOD_DUE_DATE,
                  LOANREST,OVER_FLOW,SCHEDULENO,NPACODE,STOCKSCHEME,SMS_ENROLLED,ATM_CARD_PERSONALISED,ATM_CARD_NONPERSONALISED,ATM_CARD_KCC,
                  VBS_ADD_DATA_FLAG,LOCATION_STATUS,SIGNATURE_STATUS,KYC_FLAG,NPA_INOUT_FLAG,NPA_OUT_CLOSED_BAL,SW_FLAG,SW_REASON,SW_CRITICALAMOUNT,
                  DATE_OF_BIRTH,MIN_DEMAND_DATE,INT_ON_IDMD_FLG,LR_FREQ_TYPE,NUM_OF_FLOWS,FLOW_START_DATE,FLOW_AMT,LR_INT_FREQ_TYPE,
                  INTEREST_CALC_UPTO_DATE_CR,INTEREST_CALC_UPTO_DATE_DR,NEXT_INT_RUN_DATE_CR,NEXT_INT_RUN_DATE_DR,LIEN_ACID,REP_SHDL_DATE,EI_PERD_END_DATE,
                  MOB_BANK_ENROLLMENT,QE_LAA_CRITICALAMOUNT,QE_LAA_REASON,SI1_OUTSTANDING,DEPOSIT_AMOUNT,PMJDY_FLAG
            LIMIT 100;                  

        ELSE

            FETCH ACCOUNTS_CDF_N BULK COLLECT
             INTO ACID,SOL_ID,BACID,FORACID,CUST_ID,EMP_ID,GL_SUB_HEAD_CODE,ACCT_OWNERSHIP,SCHM_CODE,SCHM_TYPE,FREZ_CODE,ACCT_OPN_DATE,
                  ACCT_CLS_DATE,CLR_BAL_AMT,UN_CLR_BAL_AMT,SANCT_LIM,PARTITIONED_FLG,PARTITIONED_TYPE,GL_CODE,NEW_SCHM_TYPE,INTEREST_RATE,DUE_DATE,
                  NPA_MAIN,NPA_SUB,INT_SUSPENSE,BOOK_BALANCE,NET_BALANCE,BSCHM_CODE,PURPOSE,SPECIAL_PROGRAMME,LBR_FIRST_DIGIT_CODE,GUARANTEE_COVER_CODE,
                  CUST_NAME,GENDER,CASTE,RELIGION,CUSTOMERTYPE,CONSTITUTION,
                  MAIN_PURPOSE_CODE,SECTOR_CODE,SUBSECTOR_CODE,SME_SECTOR_CODE,SME_SUB_SECTOR_CODE,TERM_CODE,LBR_SECTOR_CODE,LBR_ACTIVITY_CODE,
                  LBR_TYPE_OF_UNIT,LBR_3RD_DIGIT_CODE,BSR_OCCUPATION_CODE,BSR_BORROWER_CODE,BSR_ITEM_CODE,BSR_TYPE_ACCOUNT_CODE,
                  PERIODMM,SUBSIDY,EFF_BALANCE,INSURANCE_CLAIM,CGTMSE_CLAIM,BAL_NET_OFF_SUBSIDY_CLAIMS,SECURITYVALUE,CGTMSE_GUARANTEE_COVER,BAL_UNCOVERED,NPA_PROVISION,
                  KCCSCHEME,GOLDSCHEME,CCODSCHEME,VSLSCHEME,REPHASEDSCHEME,DISBURSMENT,DISBURSMENT_NO,DISBURSMENT_AMT,DEMAND_AMOUNT,
                  RECOVERY_AMOUNT,OVERDUE_NO,OVERDUE_AMOUNT,ACCT_CLS_FLG,DATE_OF_NPA,
                  ACCT_STATUS,TD_PERIODMM,TD_PERIODDD,TD_OPEN_EFFECTIVE_DATE,TD_MATURITY_DATE,TD_CONVERTED_PERIOD_TYPE,TD_CONVERTED_PERIOD,
                  DEP_PREFERENTIAL_RATE,DEP_INTEREST,
                  OPEN_COUNT,OPEN_AMOUNT,CLOSE_COUNT,CLOSE_AMOUNT,WEAKER_SECTION,
                  NAT_ID_CARD_NUM,PSPRT_NUM,PSPRT_DET,FREE_TEXT_5,PRIMARY_SOL_ID,PAN_GIR_NUM,CUST_PAGER_NO,FREE_CODE_1,FREE_CODE_4,
                  NPA_REASON,CRITICAL_AMOUNT,INDICATIVE_NPA_DATE,LOAN_REST,NPA_FLAG,NPA_MAIN_OLD,NPA_SUB_OLD,AOD_DUE_DATE,
                  LOANREST,OVER_FLOW,SCHEDULENO,NPACODE,STOCKSCHEME,SMS_ENROLLED,ATM_CARD_PERSONALISED,ATM_CARD_NONPERSONALISED,ATM_CARD_KCC,
                  VBS_ADD_DATA_FLAG,LOCATION_STATUS,SIGNATURE_STATUS,KYC_FLAG,NPA_INOUT_FLAG,NPA_OUT_CLOSED_BAL,SW_FLAG,SW_REASON,SW_CRITICALAMOUNT,
                  DATE_OF_BIRTH,MIN_DEMAND_DATE,INT_ON_IDMD_FLG,LR_FREQ_TYPE,NUM_OF_FLOWS,FLOW_START_DATE,FLOW_AMT,LR_INT_FREQ_TYPE,
                  INTEREST_CALC_UPTO_DATE_CR,INTEREST_CALC_UPTO_DATE_DR,NEXT_INT_RUN_DATE_CR,NEXT_INT_RUN_DATE_DR,LIEN_ACID,REP_SHDL_DATE,EI_PERD_END_DATE,
                  MOB_BANK_ENROLLMENT,QE_LAA_CRITICALAMOUNT,QE_LAA_REASON,SI1_OUTSTANDING,DEPOSIT_AMOUNT,PMJDY_FLAG
            LIMIT 100;                  

        END IF;

        FOR J IN 1 .. SOL_ID.COUNT
        LOOP

            VARERROR    := '1';        

            IF ACCT_CLS_FLG(J) <> 'Y' THEN

                ACCT_CLS_DATE(J)    := NULL;

            END IF;

            --IF SCHM_CODE(J) IN ('NND','GLASD','JASD','GLD','GLDP') THEN
            IF KGBINSTR(TD_SBA, SCHM_CODE(J)) = 1 THEN

                NEW_SCHM_TYPE(J)       := 'TDA';   

            --ELSIF SCHM_CODE(J) IN ('CMD') THEN
            ELSIF KGBINSTR(TD_CA, SCHM_CODE(J)) = 1 THEN

                NEW_SCHM_TYPE(J)       := 'CAA';   

            --ELSIF SCHM_CODE(J) IN ('LA778','SAFA','SATA') THEN
            ELSIF KGBINSTR(TD_LAA, SCHM_CODE(J)) = 1 THEN

                NEW_SCHM_TYPE(J)       := 'OAB';   
               
            ELSE

                NEW_SCHM_TYPE(J)       := SCHM_TYPE(J);   

            END IF;

            IF FREZ_CODE(J) NOT IN ('T','D','C') THEN

                FREZ_CODE(J):= NULL;

            END IF;

            --IF ACCT_CLS_DATE(J) IS NULL AND SCHM_CODE(J) IN ('OD116','LA260','LA269','LA268','OD107','LTD','STOTD','ODTD','STLTD') THEN
            IF ACCT_CLS_DATE(J) IS NULL AND KGBINSTR(VSL_LOANS, SCHM_CODE(J)) = 1 THEN

                BEGIN

                    SELECT LIEN_ACID
                      INTO LIEN_ACID(J)
                      FROM SDR
                     WHERE SECU_LINKAGE_TYPE ='A'
                       AND ACID = ACID(J)
                       AND SECU_CODE = 'TD'
                       AND WITHDRAW_DATE IS NULL
                       AND USE_FOR_DP_IND <> 'S'
                       AND EXISTS (SELECT 1 FROM GAM WHERE ACID = LIEN_ACID AND ACCT_CLS_DATE IS NULL AND SCHM_TYPE = 'TDA')
                       AND ROWNUM < 2;

                EXCEPTION
                     WHEN OTHERS THEN

                    LIEN_ACID(J)   := NULL;

                END;

            END IF;

            --IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

                IF NEW_SCHM_TYPE(J) IN ('SBA','CAA') THEN

                    BEGIN

                        SELECT ACCT_STATUS
                          INTO ACCT_STATUS(J)
                          FROM SMT
                         WHERE ACID = ACID(J);

                    EXCEPTION
                         WHEN OTHERS THEN

                        ACCT_STATUS(J):= 'A';

                    END;

                    IF ACCT_STATUS(J) IS NULL THEN

                        ACCT_STATUS(J):= 'A';

                    END IF;
                    
                    IF ACCT_STATUS(J) NOT IN ('A','I') THEN

                        ACCT_STATUS(J):= 'A';

                    END IF;

                END IF;

            --END IF;

            VARERROR    := '2';        

            IF NEW_SCHM_TYPE(J) = 'TDA' THEN

                -- SANCT_LIM(J) = DEPOSIT AMOUNT

                IF SCHM_CODE(J) = 'NND' THEN

                    TD_PERIODMM(J)             := 60;
                    TD_PERIODDD(J)             := 0;
                    TD_OPEN_EFFECTIVE_DATE(J)  := ACCT_OPN_DATE(J);
                    TD_MATURITY_DATE(J)        := ADD_MONTHS(ACCT_OPN_DATE(J),60);
                    TD_CONVERTED_PERIOD(J)     := 60;
                    TD_CONVERTED_PERIOD_TYPE(J):= 'M';
                    DEPOSIT_AMOUNT(J)          := CLR_BAL_AMT(J);

                ELSIF SCHM_CODE(J) = 'GLASD' THEN

                    TD_PERIODMM(J)             := 120;
                    TD_PERIODDD(J)             := 0;
                    TD_OPEN_EFFECTIVE_DATE(J)  := ACCT_OPN_DATE(J);
                    TD_MATURITY_DATE(J)        := ADD_MONTHS(ACCT_OPN_DATE(J),120);
                    TD_CONVERTED_PERIOD(J)     := 120;
                    TD_CONVERTED_PERIOD_TYPE(J):= 'M';
                    DEPOSIT_AMOUNT(J)          := CLR_BAL_AMT(J);

                ELSIF SCHM_CODE(J) = 'JASD' THEN

                    TD_PERIODMM(J)             := 120;
                    TD_PERIODDD(J)             := 0;
                    TD_OPEN_EFFECTIVE_DATE(J)  := ACCT_OPN_DATE(J);
                    TD_MATURITY_DATE(J)        := ADD_MONTHS(ACCT_OPN_DATE(J),120);
                    TD_CONVERTED_PERIOD(J)     := 120;
                    TD_CONVERTED_PERIOD_TYPE(J):= 'M';
                    DEPOSIT_AMOUNT(J)          := CLR_BAL_AMT(J);

                ELSIF SCHM_CODE(J) = 'GLD' THEN

                    TD_PERIODMM(J)             := 63;
                    TD_PERIODDD(J)             := 0;
                    TD_OPEN_EFFECTIVE_DATE(J)  := ACCT_OPN_DATE(J);
                    TD_MATURITY_DATE(J)        := ADD_MONTHS(ACCT_OPN_DATE(J),63);
                    TD_CONVERTED_PERIOD(J)     := 63;
                    TD_CONVERTED_PERIOD_TYPE(J):= 'M';
                    DEPOSIT_AMOUNT(J)          := CLR_BAL_AMT(J);

                ELSIF SCHM_CODE(J) = 'GLDP' THEN

                    TD_PERIODMM(J)             := 72;
                    TD_PERIODDD(J)             := 0;
                    TD_OPEN_EFFECTIVE_DATE(J)  := ACCT_OPN_DATE(J);
                    TD_MATURITY_DATE(J)        := ADD_MONTHS(ACCT_OPN_DATE(J),72);
                    TD_CONVERTED_PERIOD(J)     := 72;
                    TD_CONVERTED_PERIOD_TYPE(J):= 'M';
                    DEPOSIT_AMOUNT(J)          := CLR_BAL_AMT(J);

                ELSE

                    SELECT DEPOSIT_PERIOD_MTHS,DEPOSIT_PERIOD_DAYS,OPEN_EFFECTIVE_DATE,MATURITY_DATE,DEPOSIT_AMOUNT
                      INTO TD_PERIODMM(J),TD_PERIODDD(J),TD_OPEN_EFFECTIVE_DATE(J),TD_MATURITY_DATE(J),DEPOSIT_AMOUNT(J)
                      FROM TAM
                     WHERE ACID = ACID(J);

--                    BEGIN
--
--                        SELECT DEPOSIT_PERIOD_MTHS,DEPOSIT_PERIOD_DAYS,OPEN_EFFECTIVE_DATE,MATURITY_DATE,DEPOSIT_AMOUNT
--                          INTO TD_PERIODMM(J),TD_PERIODDD(J),TD_OPEN_EFFECTIVE_DATE(J),TD_MATURITY_DATE(J),DEPOSIT_AMOUNT(J)
--                          FROM RHT
--                         WHERE ACID = ACID(J)
--                           AND REN_SRL_NUM = (SELECT MIN(REN_SRL_NUM)
--                                                FROM RHT
--                                               WHERE ACID = ACID(J)
--                                                 AND TO_DATE(RCRE_TIME) >= PROCESSDATE);
--
--                    EXCEPTION
--                         WHEN OTHERS THEN
--
--                        SELECT DEPOSIT_PERIOD_MTHS,DEPOSIT_PERIOD_DAYS,OPEN_EFFECTIVE_DATE,MATURITY_DATE,DEPOSIT_AMOUNT
--                          INTO TD_PERIODMM(J),TD_PERIODDD(J),TD_OPEN_EFFECTIVE_DATE(J),TD_MATURITY_DATE(J),DEPOSIT_AMOUNT(J)
--                          FROM TAM
--                         WHERE ACID = ACID(J);
--
--                    END;

                    IF TD_MATURITY_DATE(J)-TD_OPEN_EFFECTIVE_DATE(J) <= 364 THEN

                        TD_CONVERTED_PERIOD_TYPE(J) := 'D';
                        TD_CONVERTED_PERIOD(J)      := TD_MATURITY_DATE(J)-TD_OPEN_EFFECTIVE_DATE(J);

                    ELSE

                        TD_CONVERTED_PERIOD_TYPE(J) := 'M';
                        TD_CONVERTED_PERIOD(J)      := MONTHS_BETWEEN(TD_MATURITY_DATE(J),TD_OPEN_EFFECTIVE_DATE(J));

                    END IF;

                END IF;

            END IF;

            VARERROR    := '3';        

            IF CURRENTDAYFLAG = 'Y' THEN

                SELECT COUNT(1) INTO TEMPCOUNT FROM DTD WHERE ACID = ACID(J);

                IF TEMPCOUNT > 0 THEN

                    BOOK_BALANCE(J):= PKGSMGBCOMMON.OUTSTANDINGBALANCE (ACID(J),PROCESSDATE);

                ELSE

                    BOOK_BALANCE(J):= CLR_BAL_AMT(J)+UN_CLR_BAL_AMT(J);

                END IF;

            ELSE

                BOOK_BALANCE(J):= PKGSMGBCOMMON.OUTSTANDINGBALANCE (ACID(J),PROCESSDATE);

            END IF;

            GL_CODE(J)  := SUBSTR(GL_SUB_HEAD_CODE(J),1,2);         

            VARERROR    := '4';        

            IF SCHM_TYPE(J) IN ('CCA','ODA','LAA','CAA','SBA','TDA') THEN

                BEGIN

                    SELECT REPLACE(REPLACE(CUST_NAME,CHR(13),''),CHR(10),''),CUST_SEX,NVL(CUST_CASTE_CODE,'OTH'),CUST_COMMU_CODE,CUST_TYPE_CODE,CUST_CONST,NAT_ID_CARD_NUM,PSPRT_NUM,PSPRT_DET,PRIMARY_SOL_ID,DATE_OF_BIRTH
                      INTO CUST_NAME(J),GENDER(J),CASTE(J),RELIGION(J),CUSTOMERTYPE(J),CONSTITUTION(J),NAT_ID_CARD_NUM(J),PSPRT_NUM(J),PSPRT_DET(J),PRIMARY_SOL_ID(J),DATE_OF_BIRTH(J)
                      FROM CMG
                     WHERE CUST_ID = CUST_ID(J);

                EXCEPTION
                     WHEN OTHERS THEN

                    SELECT NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
                      INTO CUST_NAME(J),GENDER(J),CASTE(J),RELIGION(J),CUSTOMERTYPE(J),CONSTITUTION(J),NAT_ID_CARD_NUM(J),PSPRT_NUM(J),PSPRT_DET(J),PRIMARY_SOL_ID(J),DATE_OF_BIRTH(J)
                      FROM DUAL;

                END;

                BEGIN

                    SELECT PAN_GIR_NUM,CUST_PAGER_NO,AADHAAR_NO,KYC_FLAG
                      INTO PAN_GIR_NUM(J),CUST_PAGER_NO(J),FREE_TEXT_5(J),KYC_FLAG(J)
                      FROM C_SPECIALINFO_CID
                     WHERE CUST_ID = CUST_ID(J);

                EXCEPTION
                     WHEN OTHERS THEN

                    SELECT NULL,NULL,NULL,NULL
                      INTO PAN_GIR_NUM(J),CUST_PAGER_NO(J),FREE_TEXT_5(J),KYC_FLAG(J)
                      FROM DUAL;

                END;

                IF KYC_FLAG(J) = 'N' THEN

                    KYC_FLAG(J) := 'KYC Data not entered';

                ELSE

                    KYC_FLAG(J) := NULL;

                END IF;

                VARERROR    := '5';        

--                IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

                BEGIN

                    SELECT FREE_CODE_1,FREE_CODE_4
                      INTO FREE_CODE_1(J),FREE_CODE_4(J)
                      FROM CEM
                     WHERE CUST_ID = CUST_ID(J);

                EXCEPTION
                     WHEN OTHERS THEN

                    SELECT NULL,NULL
                      INTO FREE_CODE_1(J),FREE_CODE_4(J)
                      FROM DUAL;

                END;

--                END IF;

            END IF;

            IF NEW_SCHM_TYPE(J) IN ('LAA','CCA','ODA') THEN

                BEGIN   

--                    SELECT SUM(SANCT_LIM),MAX(LIM_EXP_DATE)
--                      INTO SANCT_LIM(J),DUE_DATE(J)
--                      FROM LHT, LHET
--                     WHERE LHT.ACID = ACID(J)
--                       AND LHT.ENTITY_CRE_FLG = 'Y'
--                       AND LHT.ACID = LHET.ACID
--                       AND LHT.SERIAL_NUM = LHET.SERIAL_NUM
--                       AND LHT.APPLICABLE_DATE <= PROCESSDATE
--                       AND LHET.LIM_INACTIVE_DATE > PROCESSDATE
--                       AND LHET.LCHG_TIME = (SELECT MAX(ONE.LCHG_TIME)
--                                               FROM LHET ONE
--                                              WHERE ONE.ACID = LHT.ACID
--                                                AND ONE.SERIAL_NUM = LHT.SERIAL_NUM);              

                    SELECT SUM(SANCT_LIM),MAX(LIM_EXP_DATE)
                      INTO SANCT_LIM(J),DUE_DATE(J)
                      FROM LHT, LHET
                     WHERE LHT.ACID = ACID(J)
                       AND LHT.ENTITY_CRE_FLG = 'Y'
                       AND LHT.APPLICABLE_DATE <= PROCESSDATE
                       AND LHET.ACID = LHT.ACID 
                       AND LHET.SERIAL_NUM = LHT.SERIAL_NUM 
                       AND LHET.LIM_INACTIVE_DATE > PROCESSDATE
                       AND LHET.LCHG_TIME = (SELECT MAX(ONE.LCHG_TIME)
                                               FROM LHET ONE
                                              WHERE ONE.ACID = LHT.ACID
                                                AND ONE.SERIAL_NUM = LHT.SERIAL_NUM);

                EXCEPTION
                     WHEN OTHERS THEN
                                                
                    BEGIN   

                        SELECT SANCT_LIM,LIM_EXP_DATE
                          INTO SANCT_LIM(J),DUE_DATE(J)
                          FROM LHT
                         WHERE ACID = ACID(J)
                           AND SERIAL_NUM = (SELECT MAX(SERIAL_NUM)
                                               FROM LHT
                                              WHERE ACID = ACID(J));                                
                    EXCEPTION
                         WHEN OTHERS THEN

                        SANCT_LIM(J):= 0;
                        DUE_DATE(J) := ACCT_OPN_DATE(J);

                    END;

                END;

                VARERROR    := '6';        
               
                IF SANCT_LIM(J) IS NULL THEN

                    BEGIN   

                        SELECT SANCT_LIM,LIM_EXP_DATE
                          INTO SANCT_LIM(J),DUE_DATE(J)
                          FROM LHT
                         WHERE ACID = ACID(J)
                           AND SERIAL_NUM = (SELECT MAX(SERIAL_NUM)
                                               FROM LHT
                                              WHERE ACID = ACID(J));                                
                    EXCEPTION
                         WHEN OTHERS THEN

                        SANCT_LIM(J):= 0;
                        DUE_DATE(J) := ACCT_OPN_DATE(J);

                    END;

                END IF;

                IF NVL(SANCT_LIM(J),0) = 0 THEN

                    BEGIN   

                        SELECT SANCT_LIM
                          INTO SANCT_LIM(J)
                          FROM GAM
                         WHERE ACID = ACID(J);

                    EXCEPTION
                         WHEN OTHERS THEN

                        SANCT_LIM(J):= 0;

                    END;

                END IF;

            END IF;

            VARERROR    := '7';        

            IF SCHM_TYPE(J) IN ('CAA','SBA','TDA') THEN

                DEP_INTEREST(J)             := PKGSMGBCOMMON4.DEPOSITINTERESTRATE(ACID(J),SCHM_TYPE(J),PROCESSDATE);
                INTEREST_RATE(J)            := PKGSMGBCOMMON.DELIMITEDTEXT(DEP_INTEREST(J),'|',1);
                DEP_PREFERENTIAL_RATE(J)    := PKGSMGBCOMMON.DELIMITEDTEXT(DEP_INTEREST(J),'|',2);

            ELSIF SCHM_TYPE(J) IN ('CCA','ODA','LAA') THEN

                INTEREST_RATE(J):= PKGSMGBCOMMON4.ADVANCEINTERESTRATE(ACID(J),SCHM_TYPE(J),LEAST(NVL(ACCT_CLS_DATE(J),PROCESSDATE),PROCESSDATE),SANCT_LIM(J));

            END IF;

            VARERROR    := '7.1';        

            IF NEW_SCHM_TYPE(J) IN ('LAA','CCA','ODA') THEN

                BEGIN

                    SELECT SI1_NPAREASON,SI1_CRITICALAMOUNT,SI1_INDICATIVENPADATE,SI1_LOANREST,SI1_NPAFLAG,SI1_AODDUEDATE,SI1_LOANREST,SI1_OVERFLOW,SI1_QTRENDCA,SI1_QTRENDREASON,SI1_NPAMAIN,SI1_NPASUB,GREATEST(SI1_CURRENTOVERDUE-SI1_INTERESTSUSPENSE,0),SI1_OUTSTANDING,SI1_DATEOFNPA
                      INTO NPA_REASON(J),CRITICAL_AMOUNT(J),INDICATIVE_NPA_DATE(J),LOAN_REST(J),NPA_FLAG(J),AOD_DUE_DATE(J),LOANREST(J),OVER_FLOW(J),QE_LAA_CRITICALAMOUNT(J),QE_LAA_REASON(J),NPA_MAIN(J),NPA_SUB(J),OVERDUE_AMOUNT(J),SI1_OUTSTANDING(J),DATE_OF_NPA(J)
                      FROM C_SPECIALINFO3
                     WHERE SI1_ACID = ACID(J);

                EXCEPTION
                     WHEN OTHERS THEN

                    SELECT NULL,NULL,NULL,NULL,NULL,ADD_MONTHS(ACCT_OPN_DATE(J),24),NULL,NULL,NULL,NULL,0,0,NULL
                      INTO NPA_REASON(J),CRITICAL_AMOUNT(J),INDICATIVE_NPA_DATE(J),LOAN_REST(J),NPA_FLAG(J),AOD_DUE_DATE(J),QE_LAA_CRITICALAMOUNT(J),QE_LAA_REASON(J),NPA_MAIN(J),NPA_SUB(J),OVERDUE_AMOUNT(J),SI1_OUTSTANDING(J),DATE_OF_NPA(J)
                      FROM DUAL;

                END;

                VARERROR    := '7.2';        

                IF NPA_MAIN(J) IS NULL THEN

                    IF ACCT_CLS_DATE(J) IS NULL THEN

                        BEGIN

                            SELECT MAIN_CLASSIFICATION_USER,SUB_CLASSIFICATION_USER
                              INTO NPA_MAIN(J),NPA_SUB(J)
                              FROM ACH
                             WHERE B2K_TYPE = 'ACCNT'
                               AND B2K_ID = ACID(J)
                               AND SRL_NUM = (SELECT MAX(A.SRL_NUM) FROM ACH A
                                               WHERE A.B2K_TYPE='ACCNT'
                                                 AND A.B2K_ID= ACID(J)
                                                 AND A.USER_CLASSIFICATION_DATE <= PROCESSDATE);

                        EXCEPTION
                             WHEN OTHERS THEN

                            NPA_MAIN(J) := '001';
                            NPA_SUB(J)  := '001';

                        END;

                    ELSE

                        BEGIN

                            SELECT MAIN_CLASSIFICATION_USER,SUB_CLASSIFICATION_USER
                              INTO NPA_MAIN(J),NPA_SUB(J)
                              FROM ACH
                             WHERE B2K_TYPE = 'ACCNT'
                               AND B2K_ID = ACID(J)
                               AND SRL_NUM = (SELECT MAX(A.SRL_NUM) FROM ACH A
                                               WHERE A.B2K_TYPE='ACCNT'
                                                 AND A.B2K_ID= ACID(J)
                                                 AND A.USER_CLASSIFICATION_DATE < ACCT_CLS_DATE(J));

                        EXCEPTION
                             WHEN OTHERS THEN

                            NPA_MAIN(J) := '001';
                            NPA_SUB(J)  := '001';

                        END;

                    END IF;

                    IF (NPA_MAIN(J) IS NULL OR NPA_MAIN(J) NOT IN ('001','002')) THEN

                        NPA_SUB(J)          := '001';
                        NPA_MAIN(J)         := '001';
                       
                    END IF;

                    IF NPA_MAIN(J) = '002' AND NPA_SUB(J) IS NULL THEN

                        NPA_SUB(J)          := '002';

                    END IF;

                    IF NPA_MAIN(J) = '002' AND NPA_SUB(J) NOT IN ('002','003','004','005','006') THEN

                        NPA_SUB(J)          := '002';

                    END IF;

                    IF NPA_MAIN(J) = '001' AND NPA_SUB(J) <> '001' THEN

                        NPA_SUB(J)          := '001';

                    END IF;

                END IF;

                VARERROR    := '8';        
               
                IF NPA_MAIN(J) = '002' AND BOOK_BALANCE(J) < 0 THEN

                    INT_SUSPENSE(J)     := PKGSMGBCOMMON.INTERESTSUSPENSE(ACID(J),SOL_ID(J),PROCESSDATE);
                    NET_BALANCE(J)      := BOOK_BALANCE(J)+INT_SUSPENSE(J);   

                ELSE

                    INT_SUSPENSE(J)     := 0;
                    NET_BALANCE(J)      := BOOK_BALANCE(J);
                       
                END IF;

                IF NVL(SI1_OUTSTANDING(J),0) <> NVL(NET_BALANCE(J),0) THEN 

                    UPDATE C_SPECIALINFO3 
                       SET SI1_BOOKBALANCE = BOOK_BALANCE(J),
                           SI1_INTERESTSUSPENSE = INT_SUSPENSE(J),
                           SI1_OUTSTANDING = NET_BALANCE(J)
                     WHERE SI1_ACID = ACID(J);     
                    COMMIT;
                    
                END IF;

                IF NPA_MAIN(J) = '002' AND DATE_OF_NPA(J) IS NULL THEN

                    BEGIN

                        SELECT USER_CLASSIFICATION_DATE
                         INTO DATE_OF_NPA(J)
                         FROM ACH
                        WHERE B2K_TYPE = 'ACCNT'
                          AND B2K_ID = ACID(J)
                          AND SRL_NUM = (SELECT MAX(SRL_NUM) + 1
                                           FROM ACH
                                          WHERE B2K_ID= ACID(J)
                                            AND B2K_TYPE='ACCNT'
                                            AND MAIN_CLASSIFICATION_USER = '001'
                                            AND USER_CLASSIFICATION_DATE <= PROCESSDATE);

                    EXCEPTION
                         WHEN OTHERS THEN

                        BEGIN

                           SELECT MIN(USER_CLASSIFICATION_DATE)
                             INTO DATE_OF_NPA(J)
                             FROM ACH
                            WHERE B2K_TYPE = 'ACCNT'
                              AND B2K_ID = ACID(J)
                              AND USER_CLASSIFICATION_DATE <= PROCESSDATE;

                        EXCEPTION
                             WHEN OTHERS THEN

                            DATE_OF_NPA(J):= ACCT_OPN_DATE(J);

                        END;

                    END;

                    UPDATE C_SPECIALINFO3 
                       SET SI1_DATEOFNPA = DATE_OF_NPA(J)
                     WHERE SI1_ACID = ACID(J);     
                    COMMIT;

                END IF;

                VARERROR    := '9';        

                SELECT BSCHEMECODE,KCCSCHEME,GOLDSCHEME,CCODSCHEME,VSLSCHEME,REPHASEDSCHEME,STOCKSCHEME
                  INTO BSCHM_CODE(J),KCCSCHEME(J),GOLDSCHEME(J),CCODSCHEME(J),VSLSCHEME(J),REPHASEDSCHEME(J),STOCKSCHEME(J)
                  FROM C_MISLINKAGE
                 WHERE FSCHEMECODE = SCHM_CODE(J);

                BEGIN

                    SELECT PURPOSE_OF_ADVN,NVL(FREE_CODE_1,'10000'),FREE_CODE_2
                      INTO PURPOSE(J),SPECIAL_PROGRAMME(J),LBR_FIRST_DIGIT_CODE(J)
                      FROM GAC
                     WHERE ACID = ACID(J);

                EXCEPTION
                     WHEN OTHERS THEN
                    
                     PURPOSE(J)             := '117';
                     SPECIAL_PROGRAMME(J)   := '10000';
                     LBR_FIRST_DIGIT_CODE(J):= 'OTH';

                END;               

                BEGIN

                    SELECT '001'
                      INTO GUARANTEE_COVER_CODE(J)
                      FROM DUAL
                     WHERE EXISTS (SELECT 1
                                     FROM C_DATACAPT
                                    WHERE DC_DATAID = 'CGTMSE'
                                      AND DC_FIELD03 = FORACID(J));
                                                      
                    IF GUARANTEE_COVER_CODE(J) IS NULL THEN
                                        
                        SELECT '001'
                          INTO GUARANTEE_COVER_CODE(J)
                          FROM DUAL
                         WHERE EXISTS (SELECT 1
                                         FROM C_CGTMSE
                                        WHERE CGT_ACCOUNTNUMBER = FORACID(J)
                                          AND CGT_DUSERID IS NULL
                                          AND CGT_VUSERID IS NOT NULL);                        
                                        
                    END IF;                                           
                                     
                EXCEPTION
                     WHEN OTHERS THEN
                    
                     GUARANTEE_COVER_CODE(J):= '999';

                END;               

                --IF SCHM_CODE(J) IN ('KCC01','LA103','AGL','AGLNC') AND LBR_FIRST_DIGIT_CODE(J) IS NULL THEN
                IF KGBINSTR(LBR_CODES, SCHM_CODE(J)) = 1 AND LBR_FIRST_DIGIT_CODE(J) IS NULL THEN

                    LBR_FIRST_DIGIT_CODE(J):= 'MF';

                END IF;

                IF LBR_FIRST_DIGIT_CODE(J) IS NULL THEN

                    LBR_FIRST_DIGIT_CODE(J):= 'OTH';

                END IF;

                BEGIN

                    SELECT MAIN_PURPOSE_CODE,SECTOR_CODE,SUBSECTOR_CODE,SME_SECTOR_CODE,SME_SUB_SECTOR_CODE,TERM_CODE,
                           LBR_SECTOR_CODE,LBR_ACTIVITY_CODE,LBR_TYPE_OF_UNIT,LBR_3RD_DIGIT_CODE,BSR_OCCUPATION_CODE,
                           BSR_BORROWER_CODE,BSR_ITEM_CODE,BSR_TYPE_ACCOUNT_CODE,NPA_CODE             
                      INTO MAIN_PURPOSE_CODE(J),SECTOR_CODE(J),SUBSECTOR_CODE(J),SME_SECTOR_CODE(J),SME_SUB_SECTOR_CODE(J),TERM_CODE(J),
                           LBR_SECTOR_CODE(J),LBR_ACTIVITY_CODE(J),LBR_TYPE_OF_UNIT(J),LBR_3RD_DIGIT_CODE(J),BSR_OCCUPATION_CODE(J),
                           BSR_BORROWER_CODE(J),BSR_ITEM_CODE(J),BSR_TYPE_ACCOUNT_CODE(J),NPACODE(J)  
                      FROM C_MIS
                     WHERE SCHEME_CODE = SCHM_CODE(J)
                       AND SUB_PURPOSE = PURPOSE(J);

                EXCEPTION
                     WHEN OTHERS THEN

                    SELECT MAIN_PURPOSE_CODE,SECTOR_CODE,SUBSECTOR_CODE,SME_SECTOR_CODE,SME_SUB_SECTOR_CODE,TERM_CODE,
                           LBR_SECTOR_CODE,LBR_ACTIVITY_CODE,LBR_TYPE_OF_UNIT,LBR_3RD_DIGIT_CODE,BSR_OCCUPATION_CODE,
                           BSR_BORROWER_CODE,BSR_ITEM_CODE,BSR_TYPE_ACCOUNT_CODE,NPA_CODE             
                      INTO MAIN_PURPOSE_CODE(J),SECTOR_CODE(J),SUBSECTOR_CODE(J),SME_SECTOR_CODE(J),SME_SUB_SECTOR_CODE(J),TERM_CODE(J),
                           LBR_SECTOR_CODE(J),LBR_ACTIVITY_CODE(J),LBR_TYPE_OF_UNIT(J),LBR_3RD_DIGIT_CODE(J),BSR_OCCUPATION_CODE(J),
                           BSR_BORROWER_CODE(J),BSR_ITEM_CODE(J),BSR_TYPE_ACCOUNT_CODE(J),NPACODE(J)
                      FROM C_MIS
                     WHERE SCHEME_CODE = SCHM_CODE(J)
                       AND ROWNUM = 1;

                END;

                VARERROR    := '10';        

                IF NEW_SCHM_TYPE(J) = 'LAA' THEN

                    BEGIN

                        SELECT NVL(REP_PERD_MTHS,0),INT_ON_IDMD_FLG,REP_SHDL_DATE,EI_PERD_END_DATE
                          INTO PERIODMM(J),INT_ON_IDMD_FLG(J),REP_SHDL_DATE(J),EI_PERD_END_DATE(J)
                          FROM LAM
                         WHERE ACID = ACID(J);                    

                    EXCEPTION
                         WHEN OTHERS THEN

                        PERIODMM(J)         := 0;
                        INT_ON_IDMD_FLG(J)  := NULL;
                        REP_SHDL_DATE(J)    := ACCT_OPN_DATE(J);
                        EI_PERD_END_DATE(J) := DUE_DATE(J);

                    END;

                    BEGIN

                        SELECT MAX(SHDL_NUM)
                          INTO SCHEDULENO(J)
                          FROM LRS
                         WHERE ACID  = ACID(J)
                           AND ENTITY_CRE_FLG = 'Y';

                    EXCEPTION
                         WHEN OTHERS THEN

                        SCHEDULENO(J):='01';

                    END;

                    BEGIN

                        SELECT LR_FREQ_TYPE,NUM_OF_FLOWS,FLOW_START_DATE,FLOW_AMT,LR_INT_FREQ_TYPE
                          INTO LR_FREQ_TYPE(J),NUM_OF_FLOWS(J),FLOW_START_DATE(J),FLOW_AMT(J),LR_INT_FREQ_TYPE(J)
                          FROM LRS
                         WHERE ACID = ACID(J)
                           AND SHDL_NUM = SCHEDULENO(J)
                           AND FLOW_ID IN ('PRDEM','EIDEM')
                           AND CURRENT_INT_REC_FLG ='Y'                           
                           AND ROWNUM < 2;   

                    EXCEPTION
                         WHEN OTHERS THEN
                         
                        BEGIN
                         
                            SELECT LR_FREQ_TYPE,NUM_OF_FLOWS,FLOW_START_DATE,FLOW_AMT,LR_INT_FREQ_TYPE
                              INTO LR_FREQ_TYPE(J),NUM_OF_FLOWS(J),FLOW_START_DATE(J),FLOW_AMT(J),LR_INT_FREQ_TYPE(J)
                              FROM LRS
                             WHERE ACID = ACID(J)
                               AND SHDL_NUM = SCHEDULENO(J)
                               AND FLOW_ID IN ('PRDEM','EIDEM')                         
                               AND ROWNUM < 2;                        

                        EXCEPTION
                             WHEN OTHERS THEN                         

                            LR_FREQ_TYPE(J)     := NULL;
                            NUM_OF_FLOWS(J)     := NULL;
                            FLOW_START_DATE(J)  := NULL;
                            FLOW_AMT(J)         := NULL;
                            LR_INT_FREQ_TYPE(J) := NULL;
                            
                        END;

                    END;

                ELSE

                    PERIODMM(J):= 0;

                END IF;

                VARERROR    := '11';        

                IF LBR_FIRST_DIGIT_CODE(J) IN ('SF','MF','AL') THEN

                    WEAKER_SECTION(J) := 1; 

                ELSIF SPECIAL_PROGRAMME(J) IN (20019,20079,20059) THEN

                    WEAKER_SECTION(J) := 1; 

                ELSIF SME_SUB_SECTOR_CODE(J) IN (1,2) AND SANCT_LIM(J) < 25000 THEN

                    WEAKER_SECTION(J) := 1; 

                ELSIF SECTOR_CODE(J) = 2 AND CASTE(J) IN ('SC','ST') THEN

                    WEAKER_SECTION(J) := 1; 

                --ELSIF SCHM_CODE(J) IN ('KCC02','LA234','LA235','LA236','LA237','OD108','OD109','OD110','OD111','LA140','LA141','LA142','LA143','OD113','LA229','DRI','RFGSP','RGCC','MERAA','MERAN','GRMAG','GRMOP','NRLCO','NRLCS','NRLTO','NRLTS','SHGTL','VATL','VAOD','SHGOD') THEN
                ELSIF KGBINSTR(WEAK_SECTION, SCHM_CODE(J)) = 1 THEN

                    WEAKER_SECTION(J) := 1; 

                ELSIF SUBSECTOR_CODE(J) = 5 THEN

                    WEAKER_SECTION(J) := 1; 

                ELSIF RELIGION(J) IN ('MUSLI','CHRIS','SIKHS','ZION','BUDHI') THEN

                    WEAKER_SECTION(J) := 1; 

                END IF;

                IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

                    SUBSIDY(J) := PKGSMGBCOMMON4.SUBSIDYAMOUNT(ACID(J),SCHM_CODE(J),PROCESSDATE,SOL_ID(J),FORACID(J));

                    IF NET_BALANCE(J) < 0 THEN

                        EFF_BALANCE(J) := NET_BALANCE(J) * -1;

                        IF SUBSIDY(J) >= EFF_BALANCE(J) THEN

                            SUBSIDY(J)      := EFF_BALANCE(J);
                            EFF_BALANCE(J)  := 0;

                        ELSE

                            EFF_BALANCE(J)  := EFF_BALANCE(J)-SUBSIDY(J);

                        END IF;

                        IF EFF_BALANCE(J) > 0 THEN

                            INSURANCE_CLAIM(J)  := PKGSMGBCOMMON4.INSURANCECLAIM(ACID(J),SOL_ID(J),PROCESSDATE);

                            IF INSURANCE_CLAIM(J) >= EFF_BALANCE(J) THEN

                                INSURANCE_CLAIM(J)      := EFF_BALANCE(J);
                                EFF_BALANCE(J)  := 0;

                            ELSE

                                EFF_BALANCE(J)  := EFF_BALANCE(J)-INSURANCE_CLAIM(J);

                            END IF;

                        END IF;
                       
                        IF EFF_BALANCE(J) > 0 THEN

                            CGTMSE_CLAIM(J)     := PKGSMGBCOMMON4.CGTMSECLAIM(ACID(J),SOL_ID(J),PROCESSDATE);

                            IF CGTMSE_CLAIM(J) >= EFF_BALANCE(J) THEN

                                CGTMSE_CLAIM(J)         := EFF_BALANCE(J);
                                EFF_BALANCE(J)          := 0;

                            ELSE

                                EFF_BALANCE(J)          := EFF_BALANCE(J)-CGTMSE_CLAIM(J);

                            END IF;

                        END IF;
                       
                        BAL_NET_OFF_SUBSIDY_CLAIMS(J)  :=  EFF_BALANCE(J) * -1;
                       
                        IF EFF_BALANCE(J) > 0 THEN

                            SELECT COUNT(1) INTO TEMPCOUNT FROM C_MISLINKAGE WHERE FSCHEMECODE = SCHM_CODE(J) AND GOLDSCHEME + VSLSCHEME > 0;
                           
                            IF TEMPCOUNT > 0 AND NPA_MAIN(J) = '001' THEN

                                SECURITYVALUE(J)        := EFF_BALANCE(J);
                                EFF_BALANCE(J)          := 0;

                            ELSE

                                SECURITYVALUE(J)        := PKGSMGBCOMMON4.SECURITYVALUE(ACID(J),PROCESSDATE);

                                IF SECURITYVALUE(J) >= EFF_BALANCE(J) THEN

                                    SECURITYVALUE(J)    := EFF_BALANCE(J);
                                    EFF_BALANCE(J)      := 0;

                                ELSE

                                    EFF_BALANCE(J)      := EFF_BALANCE(J)-SECURITYVALUE(J);

                                END IF;

                            END IF; 

                        END IF;

                        IF SME_SECTOR_CODE(J) IN ('1','2','3') AND GUARANTEE_COVER_CODE(J) = '001' AND NPA_SUB(J) IN ('003','004') AND CGTMSE_CLAIM(J) = 0 THEN

                            CGTMSE_GUARANTEE_COVER(J)     := PKGSMGBCOMMON4.CGTMSEGUARANTEECOVER(SANCT_LIM(J),EFF_BALANCE(J),SME_SECTOR_CODE(J),NVL(GENDER(J),'M'));

                        ELSE

                            CGTMSE_GUARANTEE_COVER(J)     := 0;

                        END IF;

                        VARERROR    := '12';        

                        IF CGTMSE_GUARANTEE_COVER(J) >= EFF_BALANCE(J) THEN

                            CGTMSE_GUARANTEE_COVER(J)           := EFF_BALANCE(J);
                            EFF_BALANCE(J)                      := 0;

                        ELSE

                            EFF_BALANCE(J)                      := EFF_BALANCE(J) - CGTMSE_GUARANTEE_COVER(J);

                        END IF;

                        BAL_UNCOVERED(J)                        := EFF_BALANCE(J) * -1;

                        NPA_PROVISION(J)    := PKGSMGBCOMMON4.NPAPROVISION(SCHM_CODE(J),SME_SECTOR_CODE(J),NPA_SUB(J),BAL_NET_OFF_SUBSIDY_CLAIMS(J)*-1,SECURITYVALUE(J),BAL_UNCOVERED(J)*-1);

                    ELSE

                        SUBSIDY(J)                      := 0;
                        INSURANCE_CLAIM(J)              := 0;
                        CGTMSE_CLAIM(J)                 := 0;
                        BAL_NET_OFF_SUBSIDY_CLAIMS(J)   := 0;
                        SECURITYVALUE(J)                := 0;
                        BAL_UNCOVERED(J)                := 0;
                        NPA_PROVISION(J)                := 0;

                    END IF;

                END IF;

                VARERROR    := '13';        

                IF DUE_DATE(J) <= PROCESSDATE AND ACCT_CLS_DATE(J) IS NULL THEN

                    OVERDUE_NO(J)   := 1;

                ELSE                   

                    OVERDUE_NO(J)   := 0;

                END IF;

                IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

                    IF NET_BALANCE(J) < 0 THEN

                        OVERDUE_AMOUNT(J)   := PKGSMGBCOMMON4.OVERDUE(ACID(J),
                                                                      PROCESSDATE,
                                                                      'P',
                                                                      SCHM_CODE(J),
                                                                      SCHM_TYPE(J),
                                                                      GL_SUB_HEAD_CODE(J),
                                                                      SANCT_LIM(J),
                                                                      ACCT_OPN_DATE(J),
                                                                      DUE_DATE(J),
                                                                      ONLINEDATE,
                                                                      BOOK_BALANCE(J)*-1,
                                                                      SOL_ID(J),
                                                                      GOLDSCHEME(J),
                                                                      CCODSCHEME(J),
                                                                      KCCSCHEME(J),
                                                                      NPA_MAIN(J),
                                                                      INT_SUSPENSE(J),
                                                                      SCHEDULENO(J));

                    ELSE

                        OVERDUE_AMOUNT(J)               := 0;

                    END IF;

                    RECOVERY_AMOUNT(J)  := PKGSMGBCOMMON4.RECOVERYAMT(ACID(J),
                                                                      BEGINDATE,
                                                                      PROCESSDATE,
                                                                      SCHM_TYPE(J),
                                                                      CCODSCHEME(J),
                                                                      KCCSCHEME(J),
                                                                      ONLINEDATE,
                                                                      ACCT_CLS_DATE(J));

                    DEMAND_AMOUNT(J)    := RECOVERY_AMOUNT(J) + OVERDUE_AMOUNT(J);

                    VARERROR    := '14';        

                ELSE

                    RECOVERY_AMOUNT(J)  := 0;
                    DEMAND_AMOUNT(J)    := 0;
                    DISBURSMENT_NO(J)   := 0;
                    DISBURSMENT_AMT(J)  := 0;

                END IF;

                DISBURSMENT(J)      := PKGSMGBCOMMON4.DISBURSEMENT(ACID(J),
                                                                   BEGINDATE,
                                                                   PROCESSDATE,
                                                                   ACCT_OPN_DATE(J),
                                                                   SCHM_TYPE(J),
                                                                   SCHM_CODE(J),
                                                                   SOL_ID(J),
                                                                   KCCSCHEME(J),
                                                                   CCODSCHEME(J),
                                                                   REPHASEDSCHEME(J),
                                                                   ONLINEDATE);

                DISBURSMENT_NO(J)  := PKGSMGBCOMMON.DELIMITEDTEXT(DISBURSMENT(J),'|',1);
                DISBURSMENT_AMT(J) := PKGSMGBCOMMON.DELIMITEDTEXT(DISBURSMENT(J),'|',2);

            ELSE

                INT_SUSPENSE(J)     := 0;
                NET_BALANCE(J)      := BOOK_BALANCE(J);

            END IF;

            IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

                IF SCHM_TYPE(J) IN ('TDA') THEN

                    -- Retrieving base subglcode (avoiding overdue subglcode) for reporting in open/close base data

                    BEGIN

                        SELECT GL_SUB_HEAD_CODE
                          INTO PARTITIONED_TYPE(J)
                          FROM GSS
                         WHERE SCHM_CODE = SCHM_CODE(J)
                           AND DEL_FLG = 'N'
                           AND DEFAULT_FLG = 'Y'
                           AND ROWNUM < 2;

                    EXCEPTION
                         WHEN OTHERS THEN

                        PARTITIONED_TYPE(J):= GL_SUB_HEAD_CODE(J);

                    END;

                END IF;

                IF SCHM_TYPE(J) IN ('SBA','CAA') THEN

                    PARTITIONED_TYPE(J):= GL_SUB_HEAD_CODE(J);

                END IF;
               
                IF SCHM_TYPE(J) IN ('SBA','CAA','TDA') AND ACCT_OPN_DATE(J) BETWEEN BEGINDATE AND PROCESSDATE THEN

                    OPEN_COUNT(J)   := 1;

                    BEGIN

                        SELECT TRAN_DATE_BAL
                          INTO OPEN_AMOUNT(J)
                          FROM EAB
                         WHERE ACID = ACID(J)
                           AND EOD_DATE = (SELECT MIN(EOD_DATE)
                                             FROM EAB
                                            WHERE ACID = ACID(J)
                                              AND EOD_DATE <= PROCESSDATE)
                           AND ROWNUM < 2;                                        

                    EXCEPTION
                         WHEN OTHERS THEN

                        OPEN_AMOUNT(J):= 0;

                    END;

                END IF;

                IF SCHM_TYPE(J) IN ('SBA','CAA') AND ACCT_CLS_DATE(J) BETWEEN BEGINDATE AND PROCESSDATE THEN

                    CLOSE_COUNT(J)   := 1;

                    BEGIN

                        SELECT TRAN_DATE_BAL
                          INTO CLOSE_AMOUNT(J)
                          FROM EAB
                         WHERE ACID = ACID(J)
                           AND EOD_DATE <= ACCT_CLS_DATE(J)-1
                           AND END_EOD_DATE >= ACCT_CLS_DATE(J)-1;

                    EXCEPTION
                         WHEN OTHERS THEN

                        CLOSE_AMOUNT(J):= 0;

                    END;

                END IF;
               
                IF SCHM_TYPE(J) = 'TDA' THEN

                    FOR CURREC IN (SELECT RCRE_TIME,REN_SRL_NUM,DEPOSIT_AMOUNT FROM (
                                   SELECT TO_DATE(RCRE_TIME)RCRE_TIME,REN_SRL_NUM,DEPOSIT_AMOUNT FROM TAM WHERE ACID = ACID(J)
                                    UNION
                                   SELECT TO_DATE(RCRE_TIME)RCRE_TIME,REN_SRL_NUM,DEPOSIT_AMOUNT FROM RHT WHERE ACID = ACID(J)) ORDER BY REN_SRL_NUM)  
                    LOOP

                        IF CURREC.REN_SRL_NUM <> '0000' AND OLD_RCRE_TIME BETWEEN BEGINDATE AND PROCESSDATE THEN

                            OPEN_COUNT(J)   := NVL(OPEN_COUNT(J),0) + 1;
                            OPEN_AMOUNT(J)  := NVL(OPEN_AMOUNT(J),0) + CURREC.DEPOSIT_AMOUNT;

                        END IF;
                       
                        OLD_RCRE_TIME   := CURREC.RCRE_TIME;

                    END LOOP;

                    FOR CURREC IN (SELECT ACCT_CLS_DATE CLOSEDATE FROM GAM WHERE ACID = ACID(J) AND ACCT_CLS_DATE BETWEEN BEGINDATE AND PROCESSDATE
                                    UNION
                                   SELECT TO_DATE(TRAN_DATE) CLOSEDATE FROM RHT WHERE ACID = ACID(J) AND TRAN_DATE BETWEEN BEGINDATE AND PROCESSDATE)
                    LOOP

                        CLOSE_COUNT(J)  := NVL(CLOSE_COUNT(J),0) + 1;
                        CLOSE_AMOUNT(J) := NVL(CLOSE_AMOUNT(J),0) + PKGSMGBCOMMON.OUTSTANDINGBALANCE (ACID(J),CURREC.CLOSEDATE - 1);

                    END LOOP;

                END IF;

            END IF;

            VARERROR    := '15';        

            IF NEW_SCHM_TYPE(J) IN ('SBA','CAA') AND BOOK_BALANCE(J) < 0 THEN

                SANCT_LIM(J)                := BOOK_BALANCE(J) * -1;
                DUE_DATE(J)                 := TO_DATE('31-DEC-2099','DD-MM-YYYY');
                NPA_MAIN(J)                 := '001';
                NPA_SUB(J)                  := '001';
                INT_SUSPENSE(J)             := 0;
                NET_BALANCE(J)              := BOOK_BALANCE(J);
                BSCHM_CODE(J)               := 'TOD';
                KCCSCHEME(J)                := 0;
                GOLDSCHEME(J)               := 0;
                CCODSCHEME(J)               := 0;
                VSLSCHEME(J)                := 0;
                REPHASEDSCHEME(J)           := 0;
                PURPOSE(J)                  := '211';
                SPECIAL_PROGRAMME(J)        := '10000';
                LBR_FIRST_DIGIT_CODE(J)     := 'OTH';
                GUARANTEE_COVER_CODE(J)     := '999';

                SELECT MAIN_PURPOSE_CODE,SECTOR_CODE,SUBSECTOR_CODE,SME_SECTOR_CODE,SME_SUB_SECTOR_CODE,TERM_CODE,
                       LBR_SECTOR_CODE,LBR_ACTIVITY_CODE,LBR_TYPE_OF_UNIT,LBR_3RD_DIGIT_CODE,BSR_OCCUPATION_CODE,
                       BSR_BORROWER_CODE,BSR_ITEM_CODE,BSR_TYPE_ACCOUNT_CODE             
                  INTO MAIN_PURPOSE_CODE(J),SECTOR_CODE(J),SUBSECTOR_CODE(J),SME_SECTOR_CODE(J),SME_SUB_SECTOR_CODE(J),TERM_CODE(J),
                       LBR_SECTOR_CODE(J),LBR_ACTIVITY_CODE(J),LBR_TYPE_OF_UNIT(J),LBR_3RD_DIGIT_CODE(J),BSR_OCCUPATION_CODE(J),
                       BSR_BORROWER_CODE(J),BSR_ITEM_CODE(J),BSR_TYPE_ACCOUNT_CODE(J)  
                  FROM C_MIS
                 WHERE SCHEME_CODE = 'TOD'
                   AND SUB_PURPOSE = PURPOSE(J);

                SUBSIDY(J)                  := 0;

                IF LBR_FIRST_DIGIT_CODE(J) IN ('SF','MF','AL') THEN

                    WEAKER_SECTION(J) := 1; 

                ELSIF SPECIAL_PROGRAMME(J) IN (20019,20079,20059) THEN

                    WEAKER_SECTION(J) := 1; 

                ELSIF SME_SUB_SECTOR_CODE(J) IN (1,2) AND SANCT_LIM(J) < 25000 THEN

                    WEAKER_SECTION(J) := 1; 

                ELSIF SECTOR_CODE(J) = 2 AND CASTE(J) IN ('SC','ST') THEN

                    WEAKER_SECTION(J) := 1; 

                --ELSIF SCHM_CODE(J) IN ('KCC02','LA234','LA235','LA236','LA237','OD108','OD109','OD110','OD111','LA140','LA141','LA142','LA143','OD113','LA229','DRI','RFGSP','RGCC','MERAA','MERAN','GRMAG','GRMOP','NRLCO','NRLCS','NRLTO','NRLTS','SHGTL','VATL','VAOD','SHGOD') THEN
                ELSIF KGBINSTR(WEAK_SECTION, SCHM_CODE(J)) = 1 THEN

                    WEAKER_SECTION(J) := 1; 

                ELSIF SUBSECTOR_CODE(J) = 5 THEN

                    WEAKER_SECTION(J) := 1; 

                ELSIF RELIGION(J) IN ('MUSLI','CHRIS','SIKHS','ZION','BUDHI') THEN

                    WEAKER_SECTION(J) := 1; 

                END IF;

                OVERDUE_AMOUNT(J)               := 0;
                OVERDUE_NO(J)                   := 0;
                RECOVERY_AMOUNT(J)              := 0;
                DEMAND_AMOUNT(J)                := 0;
                DISBURSMENT_NO(J)               := 0;
                DISBURSMENT_AMT(J)              := 0;
                PERIODMM(J)                     := 0;

                IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

                    INSURANCE_CLAIM(J)              := 0;
                    CGTMSE_CLAIM(J)                 := 0;
                    BAL_NET_OFF_SUBSIDY_CLAIMS(J)   := BOOK_BALANCE(J);
                    SECURITYVALUE(J)                := 0;
                    CGTMSE_GUARANTEE_COVER(J)       := 0;
                    BAL_UNCOVERED(J)                := BOOK_BALANCE(J);
                    NPA_PROVISION(J)                := PKGSMGBCOMMON4.NPAPROVISION(SCHM_CODE(J),SME_SECTOR_CODE(J),NPA_SUB(J),BAL_NET_OFF_SUBSIDY_CLAIMS(J)*-1,SECURITYVALUE(J),BAL_UNCOVERED(J)*-1);

                END IF;

            END IF;

            IF NEW_SCHM_TYPE(J) IN ('LAA','CCA','ODA') AND ACCT_CLS_DATE(J) IS NULL AND CURRENTDAYFLAG = 'Y' THEN

                IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

                    IF NPA_MAIN(J) = '001' AND GOLDSCHEME(J) = 1 AND ACCT_OPN_DATE(J) <= ADD_MONTHS(PROCESSDATE,-13) THEN

                        SW_FLAG(J)              := 1;
                        SW_REASON(J)            := 'Fully overdue';
                        SW_CRITICALAMOUNT(J)    := 0;
                        MIN_DEMAND_DATE(J)      := DUE_DATE(J);    

                    END IF;

                END IF;

            END IF;

            VARERROR    := '16';        

            -- UPDATING ATM ISSUE FLAG

            IF NEW_SCHM_TYPE(J) IN ('SBA','CAA','CCA','ODA') AND ACCT_CLS_DATE(J) IS NULL THEN

                SELECT COUNT(1)
                  INTO TEMPCOUNT
                  FROM C_ATM
                 WHERE CUST_ID = CUST_ID(J)
                   AND CARD_TYPE = 'ATM'
                   AND VERIFIED_FLG = 'V'
                   AND DEL_FLG = 'N';
                       
                IF TEMPCOUNT > 0 THEN

                    ATM_CARD_PERSONALISED(J) := 'Y';

                ELSE

                    SELECT COUNT(1)
                      INTO TEMPCOUNT
                      FROM CAR
                     WHERE ACID = ACID(J)
                       AND EXISTS (SELECT 1
                                     FROM CST
                                    WHERE CARD_NUMBER = CONSID
                                      AND PIN IN ('000000000000000NPC','0000000000000000PC')
                                      AND HOT_CARD_STATUS_CODE = '0'
                                      AND DEL_FLG = 'N');

                    IF TEMPCOUNT > 0 THEN

                        ATM_CARD_NONPERSONALISED(J) := 'Y';

                    END IF;

                END IF;

            END IF;

            IF KCCSCHEME(J) = 1 AND ACCT_CLS_DATE(J) IS NULL THEN

                SELECT COUNT(1)
                  INTO TEMPCOUNT
                  FROM C_ATM
                 WHERE CUST_ID = CUST_ID(J)
                   AND CARD_TYPE = 'KCC'
                   AND VERIFIED_FLG = 'V'
                   AND DEL_FLG = 'N';
                       
                IF TEMPCOUNT > 0 THEN

                    ATM_CARD_KCC(J) := 'Y';

                END IF;

            END IF;

            -- UPDATING PMJDY FLAG
            -- Logic
            -- All accounts under SB101 and SB103 opened between 15-08-2014 to 31-01-2015 related to individuals
            -- All accounts under SB101 opened between 01-02-2015 to 31-03-2016 related to individuals and having AADHAAR linked and ATM card issued 
            -- All accounts under SB103 opened >= 01-02-2015 related to individuals and having ATM card issued 

            IF SCHM_CODE(J) IN ('SB101','SB103') AND
               NEW_SCHM_TYPE(J) = 'SBA' AND
               ACCT_OPN_DATE(J) BETWEEN TO_DATE('15-AUG-2014','DD-MM-YYYY') AND TO_DATE('31-JAN-2015','DD-MM-YYYY') AND 
               ACCT_OPN_DATE(J) <> TO_DATE('02-NOV-2014','DD-MM-YYYY') AND
               NVL(GENDER(J),'M') IN ('M','F','T') AND
               ACCT_CLS_DATE(J) IS NULL THEN

                PMJDY_FLAG(J) := 'Y';

            END IF;

            IF SCHM_CODE(J) = 'SB101' AND
               NEW_SCHM_TYPE(J) = 'SBA' AND
               ACCT_OPN_DATE(J) BETWEEN TO_DATE('01-FEB-2015','DD-MM-YYYY') AND TO_DATE('31-MAR-2016','DD-MM-YYYY') AND 
               NVL(GENDER(J),'M') IN ('M','F','T') AND
               FREE_TEXT_5(J) IS NOT NULL AND
               (ATM_CARD_PERSONALISED(J) = 'Y' OR ATM_CARD_NONPERSONALISED(J) = 'Y') AND
               ACCT_CLS_DATE(J) IS NULL THEN

                PMJDY_FLAG(J) := 'Y';

            END IF;

            IF SCHM_CODE(J) = 'SB103' AND
               NEW_SCHM_TYPE(J) = 'SBA' AND
               ACCT_OPN_DATE(J) >= TO_DATE('01-FEB-2015','DD-MM-YYYY') AND 
               NVL(GENDER(J),'M') IN ('M','F','T') AND
               (ATM_CARD_PERSONALISED(J) = 'Y' OR ATM_CARD_NONPERSONALISED(J) = 'Y') AND
               ACCT_CLS_DATE(J) IS NULL THEN

                PMJDY_FLAG(J) := 'Y';

            END IF;

            IF NEW_SCHM_TYPE(J) = 'SBA' AND ACCT_CLS_DATE(J) IS NULL AND CUST_PAGER_NO(J) IS NOT NULL THEN

                SELECT COUNT(1)
                  INTO TEMPCOUNT
                  FROM C_SMS
                 WHERE CUST_ID = CUST_ID(J)
                   AND VERIFIED_FLG = 'V'
                   AND DEL_FLG = 'N';
                           
                IF TEMPCOUNT > 0 THEN

                    SMS_ENROLLED(J) := 'Y';

                END IF;

                SELECT COUNT(1)
                  INTO TEMPCOUNT
                  FROM C_SMS_ACCT
                 WHERE CUST_ID = CUST_ID(J)
                   AND ACCOUNT_FLG IN ('P','S'); 

                IF TEMPCOUNT > 0 THEN

                    MOB_BANK_ENROLLMENT(J) := 'Y';

                END IF;
                        
            END IF;
                
            IF SATURDAY_LASTDAY_FLAG = 'Y' THEN                

                IF NEW_SCHM_TYPE(J) IN ('SBA','CAA','CCA','ODA') AND ACCT_CLS_DATE(J) IS NULL AND NVL(TRIM(FREZ_CODE(J)),'C') = 'C' THEN

                    FOR CURREC IN (SELECT CUST_ID FROM AAS WHERE ACID = ACID(J) AND DEL_FLG = 'N')
                    LOOP

                        SELECT COUNT(1)
                          INTO TEMPCOUNT
                          FROM IMT
                         WHERE CUST_ID = CURREC.CUST_ID;

                        IF TEMPCOUNT = 0 THEN
                               
                            IF CURREC.CUST_ID = CUST_ID(J) THEN

                                SIGNATURE_STATUS(J)   := 'N';

                            ELSE

                                INSERT INTO C_BD (SOL_ID,GL_CODE,GL_SUB_HEAD_CODE,ACID,SCHM_TYPE,NEW_SCHM_TYPE,SCHM_CODE,BSCHM_CODE,FORACID,CUST_ID,SIGNATURE_STATUS)
                                VALUES (SOL_ID(J),GL_CODE(J),GL_SUB_HEAD_CODE(J),ACID(J),SCHM_TYPE(J),'ZZZ',SCHM_CODE(J),BSCHM_CODE(J),FORACID(J),CURREC.CUST_ID,'N');
                                COMMIT;
                                   
                            END IF;
                               
                        END IF;

                    END LOOP;

                END IF;

            END IF;
            
            --IF SCHM_CODE(J) IN ('LA265','LA274','LA275','LA266','ELIBA','ELMQ','ELVT','SKEDL','SKELF') AND ACCT_CLS_DATE(J) IS NULL THEN
            IF KGBINSTR(EDU_LOAN, SCHM_CODE(J)) = 1 AND ACCT_CLS_DATE(J) IS NULL THEN

                SELECT COUNT(1)
                  INTO TEMPCOUNT
                  FROM C_LINKACCOUNT
                 WHERE LINK_EVENTID = 2
                   AND LINK_ACCOUNTNUMBER = FORACID(J)
                   AND LINK_DUSERID IS NULL
                   AND LINK_VUSERID IS NOT NULL;

                IF TEMPCOUNT > 0 THEN

                    VBS_ADD_DATA_FLAG(J) := 'Y';

                ELSE

                    VBS_ADD_DATA_FLAG(J) := 'N';

                END IF;

            END IF;

            IF NEW_SCHM_TYPE(J) IN ('SBA','CAA') AND ACCT_CLS_DATE(J) IS NULL THEN

                IF FREE_CODE_1(J) IS NULL THEN

                    LOCATION_STATUS(J) := 'Location ID not linked';

                ELSE

                    SELECT COUNT(1)
                      INTO TEMPCOUNT
                      FROM C_LOCATION
                     WHERE LOC_CODE = FREE_CODE_1(J)
                       AND LOC_VILLAGE = 0;

                    IF TEMPCOUNT > 0 THEN

                        LOCATION_STATUS(J) := 'Invalid Location ID';

                    END IF;

                END IF;

            END IF;

            VARERROR    := '19';        

        END LOOP;

       FORALL J IN 1 .. SOL_ID.COUNT
       INSERT INTO C_BD (SOL_ID,GL_CODE,GL_SUB_HEAD_CODE,ACID,BACID,SCHM_TYPE,NEW_SCHM_TYPE,SCHM_CODE,BSCHM_CODE,FORACID,CUST_ID,CUST_NAME,
                          EMP_ID,ACCT_OWNERSHIP,PARTITIONED_FLG,PARTITIONED_TYPE,FREZ_CODE,ACCT_OPN_DATE,DUE_DATE,ACCT_CLS_DATE,SANCT_LIM,
                          PERIODMM,INTEREST_RATE,NPA_MAIN,NPA_SUB,DATE_OF_NPA,CLR_BAL_AMT,UN_CLR_BAL_AMT,BOOK_BALANCE,INT_SUSPENSE,NET_BALANCE,
                          SUBSIDY,INSURANCE_CLAIM,CGTMSE_CLAIM,BAL_NET_OFF_SUBSIDY_CLAIMS,SECURITYVALUE,CGTMSE_GUARANTEE_COVER,BAL_UNCOVERED,
                          NPA_PROVISION,PURPOSE,SPECIAL_PROGRAMME,LBR_FIRST_DIGIT_CODE,GUARANTEE_COVER_CODE,GENDER,CASTE,RELIGION,CUSTOMERTYPE,
                          CONSTITUTION,MAIN_PURPOSE_CODE,SECTOR_CODE,SUBSECTOR_CODE,SME_SECTOR_CODE,SME_SUB_SECTOR_CODE,TERM_CODE,LBR_SECTOR_CODE,
                          LBR_ACTIVITY_CODE,LBR_TYPE_OF_UNIT,LBR_3RD_DIGIT_CODE,BSR_OCCUPATION_CODE,BSR_BORROWER_CODE,BSR_ITEM_CODE,BSR_TYPE_ACCOUNT_CODE,
                          KCCSCHEME,GOLDSCHEME,CCODSCHEME,VSLSCHEME,REPHASEDSCHEME,ONLINEDATE,DISBURSMENT_NO,DISBURSMENT_AMT,DEMAND_AMOUNT,RECOVERY_AMOUNT,
                          OVERDUE_NO,OVERDUE_AMOUNT,ACCT_STATUS,TD_PERIODMM,TD_PERIODDD,TD_OPEN_EFFECTIVE_DATE,TD_MATURITY_DATE,TD_CONVERTED_PERIOD_TYPE,
                          TD_CONVERTED_PERIOD,DEP_PREFERENTIAL_RATE,OPEN_COUNT,OPEN_AMOUNT,CLOSE_COUNT,CLOSE_AMOUNT,WEAKER_SECTION,RONAME,DTNAME,
                          NAT_ID_CARD_NUM,PSPRT_NUM,PSPRT_DET,FREE_TEXT_5,PRIMARY_SOL_ID,PAN_GIR_NUM,CUST_PAGER_NO,FREE_CODE_1,FREE_CODE_4,
                          NPA_REASON,CRITICAL_AMOUNT,INDICATIVE_NPA_DATE,LOAN_REST,NPA_FLAG,NPA_MAIN_OLD,NPA_SUB_OLD,AOD_DUE_DATE,
                          LOANREST,OVER_FLOW,SCHEDULENO,NPACODE,STOCKSCHEME,SMS_ENROLLED,ATM_CARD_PERSONALISED,ATM_CARD_NONPERSONALISED,ATM_CARD_KCC,
                          VBS_ADD_DATA_FLAG,LOCATION_STATUS,SIGNATURE_STATUS,KYC_FLAG,NPA_INOUT_FLAG,NPA_OUT_CLOSED_BAL,SW_FLAG,SW_REASON,SW_CRITICALAMOUNT,
                          DATE_OF_BIRTH,MIN_DEMAND_DATE,INT_ON_IDMD_FLG,LR_FREQ_TYPE,NUM_OF_FLOWS,FLOW_START_DATE,FLOW_AMT,LR_INT_FREQ_TYPE,
                          INTEREST_CALC_UPTO_DATE_CR,INTEREST_CALC_UPTO_DATE_DR,NEXT_INT_RUN_DATE_CR,NEXT_INT_RUN_DATE_DR,LIEN_ACID,REP_SHDL_DATE,
                          EI_PERD_END_DATE,MOB_BANK_ENROLLMENT,QE_LAA_CRITICALAMOUNT,QE_LAA_REASON,DEPOSIT_AMOUNT,PMJDY_FLAG)
        SELECT SOL_ID(J),GL_CODE(J),GL_SUB_HEAD_CODE(J),ACID(J),BACID(J),SCHM_TYPE(J),NEW_SCHM_TYPE(J),SCHM_CODE(J),BSCHM_CODE(J),FORACID(J),CUST_ID(J),CUST_NAME(J),
               EMP_ID(J),ACCT_OWNERSHIP(J),PARTITIONED_FLG(J),PARTITIONED_TYPE(J),FREZ_CODE(J),ACCT_OPN_DATE(J),DUE_DATE(J),ACCT_CLS_DATE(J),SANCT_LIM(J),
               PERIODMM(J),INTEREST_RATE(J),NPA_MAIN(J),NPA_SUB(J),DATE_OF_NPA(J),CLR_BAL_AMT(J),UN_CLR_BAL_AMT(J),BOOK_BALANCE(J),INT_SUSPENSE(J),NET_BALANCE(J),
               SUBSIDY(J),INSURANCE_CLAIM(J),CGTMSE_CLAIM(J),BAL_NET_OFF_SUBSIDY_CLAIMS(J),SECURITYVALUE(J),CGTMSE_GUARANTEE_COVER(J),BAL_UNCOVERED(J),
               NPA_PROVISION(J),PURPOSE(J),SPECIAL_PROGRAMME(J),LBR_FIRST_DIGIT_CODE(J),GUARANTEE_COVER_CODE(J),GENDER(J),CASTE(J),RELIGION(J),CUSTOMERTYPE(J),
               CONSTITUTION(J),MAIN_PURPOSE_CODE(J),SECTOR_CODE(J),SUBSECTOR_CODE(J),SME_SECTOR_CODE(J),SME_SUB_SECTOR_CODE(J),TERM_CODE(J),LBR_SECTOR_CODE(J),
               LBR_ACTIVITY_CODE(J),LBR_TYPE_OF_UNIT(J),LBR_3RD_DIGIT_CODE(J),BSR_OCCUPATION_CODE(J),BSR_BORROWER_CODE(J),BSR_ITEM_CODE(J),BSR_TYPE_ACCOUNT_CODE(J),
               KCCSCHEME(J),GOLDSCHEME(J),CCODSCHEME(J),VSLSCHEME(J),REPHASEDSCHEME(J),ONLINEDATE,DISBURSMENT_NO(J),DISBURSMENT_AMT(J),DEMAND_AMOUNT(J),RECOVERY_AMOUNT(J),
               OVERDUE_NO(J),OVERDUE_AMOUNT(J),ACCT_STATUS(J),TD_PERIODMM(J),TD_PERIODDD(J),TD_OPEN_EFFECTIVE_DATE(J),TD_MATURITY_DATE(J),TD_CONVERTED_PERIOD_TYPE(J),
               TD_CONVERTED_PERIOD(J),DEP_PREFERENTIAL_RATE(J),OPEN_COUNT(J),OPEN_AMOUNT(J),CLOSE_COUNT(J),CLOSE_AMOUNT(J),WEAKER_SECTION(J),RONAME,DTNAME,
               NAT_ID_CARD_NUM(J),PSPRT_NUM(J),PSPRT_DET(J),FREE_TEXT_5(J),PRIMARY_SOL_ID(J),PAN_GIR_NUM(J),CUST_PAGER_NO(J),FREE_CODE_1(J),FREE_CODE_4(J),
               NPA_REASON(J),CRITICAL_AMOUNT(J),INDICATIVE_NPA_DATE(J),LOAN_REST(J),NPA_FLAG(J),NPA_MAIN_OLD(J),NPA_SUB_OLD(J),AOD_DUE_DATE(J),
               LOANREST(J),OVER_FLOW(J),SCHEDULENO(J),NPACODE(J),STOCKSCHEME(J),SMS_ENROLLED(J),ATM_CARD_PERSONALISED(J),ATM_CARD_NONPERSONALISED(J),ATM_CARD_KCC(J),
               VBS_ADD_DATA_FLAG(J),LOCATION_STATUS(J),SIGNATURE_STATUS(J),KYC_FLAG(J),NPA_INOUT_FLAG(J),NPA_OUT_CLOSED_BAL(J),SW_FLAG(J),SW_REASON(J),
               SW_CRITICALAMOUNT(J),DATE_OF_BIRTH(J),MIN_DEMAND_DATE(J),
               INT_ON_IDMD_FLG(J),LR_FREQ_TYPE(J),NUM_OF_FLOWS(J),FLOW_START_DATE(J),FLOW_AMT(J),LR_INT_FREQ_TYPE(J),INTEREST_CALC_UPTO_DATE_CR(J),
               INTEREST_CALC_UPTO_DATE_DR(J),NEXT_INT_RUN_DATE_CR(J),NEXT_INT_RUN_DATE_DR(J),LIEN_ACID(J),REP_SHDL_DATE(J),EI_PERD_END_DATE(J),
               MOB_BANK_ENROLLMENT(J),QE_LAA_CRITICALAMOUNT(J),QE_LAA_REASON(J),DEPOSIT_AMOUNT(J),PMJDY_FLAG(J)
          FROM DUAL;              
        COMMIT;

       -- Inserting TOD Data

       FORALL J IN 1 .. SOL_ID.COUNT
       INSERT INTO C_BD (SOL_ID,GL_CODE,GL_SUB_HEAD_CODE,ACID,BACID,SCHM_TYPE,NEW_SCHM_TYPE,SCHM_CODE,BSCHM_CODE,FORACID,CUST_ID,CUST_NAME,
                          EMP_ID,ACCT_OWNERSHIP,PARTITIONED_FLG,PARTITIONED_TYPE,FREZ_CODE,ACCT_OPN_DATE,DUE_DATE,ACCT_CLS_DATE,SANCT_LIM,
                          PERIODMM,INTEREST_RATE,NPA_MAIN,NPA_SUB,DATE_OF_NPA,CLR_BAL_AMT,UN_CLR_BAL_AMT,BOOK_BALANCE,INT_SUSPENSE,NET_BALANCE,
                          SUBSIDY,INSURANCE_CLAIM,CGTMSE_CLAIM,BAL_NET_OFF_SUBSIDY_CLAIMS,SECURITYVALUE,CGTMSE_GUARANTEE_COVER,BAL_UNCOVERED,
                          NPA_PROVISION,PURPOSE,SPECIAL_PROGRAMME,LBR_FIRST_DIGIT_CODE,GUARANTEE_COVER_CODE,GENDER,CASTE,RELIGION,CUSTOMERTYPE,
                          CONSTITUTION,MAIN_PURPOSE_CODE,SECTOR_CODE,SUBSECTOR_CODE,SME_SECTOR_CODE,SME_SUB_SECTOR_CODE,TERM_CODE,LBR_SECTOR_CODE,
                          LBR_ACTIVITY_CODE,LBR_TYPE_OF_UNIT,LBR_3RD_DIGIT_CODE,BSR_OCCUPATION_CODE,BSR_BORROWER_CODE,BSR_ITEM_CODE,BSR_TYPE_ACCOUNT_CODE,
                          KCCSCHEME,GOLDSCHEME,CCODSCHEME,VSLSCHEME,REPHASEDSCHEME,ONLINEDATE,DISBURSMENT_NO,DISBURSMENT_AMT,DEMAND_AMOUNT,RECOVERY_AMOUNT,
                          OVERDUE_NO,OVERDUE_AMOUNT,ACCT_STATUS,TD_PERIODMM,TD_PERIODDD,TD_OPEN_EFFECTIVE_DATE,TD_MATURITY_DATE,TD_CONVERTED_PERIOD_TYPE,
                          TD_CONVERTED_PERIOD,DEP_PREFERENTIAL_RATE,OPEN_COUNT,OPEN_AMOUNT,CLOSE_COUNT,CLOSE_AMOUNT,WEAKER_SECTION,RONAME,DTNAME,
                          NAT_ID_CARD_NUM,PSPRT_NUM,PSPRT_DET,FREE_TEXT_5,PRIMARY_SOL_ID,PAN_GIR_NUM,CUST_PAGER_NO,FREE_CODE_1,FREE_CODE_4,
                          NPA_REASON,CRITICAL_AMOUNT,INDICATIVE_NPA_DATE,LOAN_REST,NPA_FLAG,NPA_MAIN_OLD,NPA_SUB_OLD,AOD_DUE_DATE,
                          LOANREST,OVER_FLOW,SCHEDULENO,NPACODE,STOCKSCHEME,SMS_ENROLLED,ATM_CARD_PERSONALISED,ATM_CARD_NONPERSONALISED,ATM_CARD_KCC,
                          VBS_ADD_DATA_FLAG,LOCATION_STATUS,SIGNATURE_STATUS,KYC_FLAG,NPA_INOUT_FLAG,NPA_OUT_CLOSED_BAL,SW_FLAG,SW_REASON,SW_CRITICALAMOUNT,
                          DATE_OF_BIRTH,MIN_DEMAND_DATE,INT_ON_IDMD_FLG,LR_FREQ_TYPE,NUM_OF_FLOWS,FLOW_START_DATE,FLOW_AMT,LR_INT_FREQ_TYPE,
                          INTEREST_CALC_UPTO_DATE_CR,INTEREST_CALC_UPTO_DATE_DR,NEXT_INT_RUN_DATE_CR,NEXT_INT_RUN_DATE_DR,LIEN_ACID,REP_SHDL_DATE,
                          EI_PERD_END_DATE,MOB_BANK_ENROLLMENT,QE_LAA_CRITICALAMOUNT,QE_LAA_REASON,DEPOSIT_AMOUNT,PMJDY_FLAG)
        SELECT SOL_ID(J),GL_CODE(J),GL_SUB_HEAD_CODE(J),ACID(J),BACID(J),'TOD','TOD','TOD',BSCHM_CODE(J),FORACID(J),CUST_ID(J),CUST_NAME(J),
               EMP_ID(J),ACCT_OWNERSHIP(J),PARTITIONED_FLG(J),PARTITIONED_TYPE(J),FREZ_CODE(J),ACCT_OPN_DATE(J),DUE_DATE(J),ACCT_CLS_DATE(J),SANCT_LIM(J),
               PERIODMM(J),PKGSMGBCOMMON4.ADVANCEINTERESTRATE(ACID(J),'TOD',PROCESSDATE,SANCT_LIM(J)),NPA_MAIN(J),NPA_SUB(J),DATE_OF_NPA(J),CLR_BAL_AMT(J),UN_CLR_BAL_AMT(J),BOOK_BALANCE(J),INT_SUSPENSE(J),NET_BALANCE(J),
               SUBSIDY(J),INSURANCE_CLAIM(J),CGTMSE_CLAIM(J),BAL_NET_OFF_SUBSIDY_CLAIMS(J),SECURITYVALUE(J),CGTMSE_GUARANTEE_COVER(J),BAL_UNCOVERED(J),
               NPA_PROVISION(J),PURPOSE(J),SPECIAL_PROGRAMME(J),LBR_FIRST_DIGIT_CODE(J),GUARANTEE_COVER_CODE(J),GENDER(J),CASTE(J),RELIGION(J),CUSTOMERTYPE(J),
               CONSTITUTION(J),MAIN_PURPOSE_CODE(J),SECTOR_CODE(J),SUBSECTOR_CODE(J),SME_SECTOR_CODE(J),SME_SUB_SECTOR_CODE(J),TERM_CODE(J),LBR_SECTOR_CODE(J),
               LBR_ACTIVITY_CODE(J),LBR_TYPE_OF_UNIT(J),LBR_3RD_DIGIT_CODE(J),BSR_OCCUPATION_CODE(J),BSR_BORROWER_CODE(J),BSR_ITEM_CODE(J),BSR_TYPE_ACCOUNT_CODE(J),
               KCCSCHEME(J),GOLDSCHEME(J),CCODSCHEME(J),VSLSCHEME(J),REPHASEDSCHEME(J),ONLINEDATE,DISBURSMENT_NO(J),DISBURSMENT_AMT(J),DEMAND_AMOUNT(J),RECOVERY_AMOUNT(J),
               OVERDUE_NO(J),OVERDUE_AMOUNT(J),ACCT_STATUS(J),TD_PERIODMM(J),TD_PERIODDD(J),TD_OPEN_EFFECTIVE_DATE(J),TD_MATURITY_DATE(J),TD_CONVERTED_PERIOD_TYPE(J),
               TD_CONVERTED_PERIOD(J),DEP_PREFERENTIAL_RATE(J),OPEN_COUNT(J),OPEN_AMOUNT(J),CLOSE_COUNT(J),CLOSE_AMOUNT(J),WEAKER_SECTION(J),RONAME,DTNAME,
               NAT_ID_CARD_NUM(J),PSPRT_NUM(J),PSPRT_DET(J),FREE_TEXT_5(J),PRIMARY_SOL_ID(J),PAN_GIR_NUM(J),CUST_PAGER_NO(J),FREE_CODE_1(J),FREE_CODE_4(J),
               NPA_REASON(J),CRITICAL_AMOUNT(J),INDICATIVE_NPA_DATE(J),LOAN_REST(J),NPA_FLAG(J),NPA_MAIN_OLD(J),NPA_SUB_OLD(J),AOD_DUE_DATE(J),
               LOANREST(J),OVER_FLOW(J),SCHEDULENO(J),NPACODE(J),STOCKSCHEME(J),SMS_ENROLLED(J),ATM_CARD_PERSONALISED(J),ATM_CARD_NONPERSONALISED(J),ATM_CARD_KCC(J),
               VBS_ADD_DATA_FLAG(J),LOCATION_STATUS(J),SIGNATURE_STATUS(J),KYC_FLAG(J),NPA_INOUT_FLAG(J),NPA_OUT_CLOSED_BAL(J),SW_FLAG(J),SW_REASON(J),
               SW_CRITICALAMOUNT(J),DATE_OF_BIRTH(J),MIN_DEMAND_DATE(J),INT_ON_IDMD_FLG(J),LR_FREQ_TYPE(J),NUM_OF_FLOWS(J),FLOW_START_DATE(J),
               FLOW_AMT(J),LR_INT_FREQ_TYPE(J),INTEREST_CALC_UPTO_DATE_CR(J),INTEREST_CALC_UPTO_DATE_DR(J),NEXT_INT_RUN_DATE_CR(J),
               NEXT_INT_RUN_DATE_DR(J),LIEN_ACID(J),REP_SHDL_DATE(J),EI_PERD_END_DATE(J),MOB_BANK_ENROLLMENT(J),QE_LAA_CRITICALAMOUNT(J),QE_LAA_REASON(J),DEPOSIT_AMOUNT(J),PMJDY_FLAG(J)
          FROM DUAL
         WHERE NEW_SCHM_TYPE(J) IN ('SBA','CAA')
           AND BOOK_BALANCE(J) < 0;              
        COMMIT;

        IF CURRENTDAYFLAG = 'Y' THEN

           EXIT WHEN ACCOUNTS_CDF_Y%NOTFOUND;

        ELSE

           EXIT WHEN ACCOUNTS_CDF_N%NOTFOUND;

        END IF;

    END LOOP;

    IF CURRENTDAYFLAG = 'Y' THEN

        CLOSE ACCOUNTS_CDF_Y;

    ELSE

        CLOSE ACCOUNTS_CDF_N;

    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),2 FROM DUAL;
    COMMIT;

    OPEN BILLSPURCHASED;
    LOOP

        FETCH BILLSPURCHASED BULK COLLECT
         INTO ACID,SOL_ID,BACID,FORACID,CUST_ID,EMP_ID,GL_SUB_HEAD_CODE,ACCT_OWNERSHIP,SCHM_CODE,SCHM_TYPE,FREZ_CODE,ACCT_OPN_DATE,
              ACCT_CLS_DATE,CLR_BAL_AMT,UN_CLR_BAL_AMT,SANCT_LIM,PARTITIONED_FLG,PARTITIONED_TYPE,GL_CODE,NEW_SCHM_TYPE,INTEREST_RATE,DUE_DATE,
              NPA_MAIN,NPA_SUB,INT_SUSPENSE,BOOK_BALANCE,NET_BALANCE,BSCHM_CODE,PURPOSE,SPECIAL_PROGRAMME,LBR_FIRST_DIGIT_CODE,GUARANTEE_COVER_CODE,
              CUST_NAME,GENDER,CASTE,RELIGION,CUSTOMERTYPE,CONSTITUTION,
              MAIN_PURPOSE_CODE,SECTOR_CODE,SUBSECTOR_CODE,SME_SECTOR_CODE,SME_SUB_SECTOR_CODE,TERM_CODE,LBR_SECTOR_CODE,LBR_ACTIVITY_CODE,
              LBR_TYPE_OF_UNIT,LBR_3RD_DIGIT_CODE,BSR_OCCUPATION_CODE,BSR_BORROWER_CODE,BSR_ITEM_CODE,BSR_TYPE_ACCOUNT_CODE,
              PERIODMM,SUBSIDY,EFF_BALANCE,INSURANCE_CLAIM,CGTMSE_CLAIM,BAL_NET_OFF_SUBSIDY_CLAIMS,SECURITYVALUE,CGTMSE_GUARANTEE_COVER,BAL_UNCOVERED,NPA_PROVISION,
              KCCSCHEME,GOLDSCHEME,CCODSCHEME,VSLSCHEME,REPHASEDSCHEME,DISBURSMENT,DISBURSMENT_NO,DISBURSMENT_AMT,DEMAND_AMOUNT,
              RECOVERY_AMOUNT,OVERDUE_NO,OVERDUE_AMOUNT,ACCT_CLS_FLG,DATE_OF_NPA,
              ACCT_STATUS,TD_PERIODMM,TD_PERIODDD,TD_OPEN_EFFECTIVE_DATE,TD_MATURITY_DATE,TD_CONVERTED_PERIOD_TYPE,TD_CONVERTED_PERIOD,
              DEP_PREFERENTIAL_RATE,DEP_INTEREST,
              OPEN_COUNT,OPEN_AMOUNT,CLOSE_COUNT,CLOSE_AMOUNT,WEAKER_SECTION,
              NAT_ID_CARD_NUM,PSPRT_NUM,PSPRT_DET,FREE_TEXT_5,PRIMARY_SOL_ID,PAN_GIR_NUM,CUST_PAGER_NO,FREE_CODE_1,FREE_CODE_4,
              NPA_REASON,CRITICAL_AMOUNT,INDICATIVE_NPA_DATE,LOAN_REST,NPA_FLAG,NPA_MAIN_OLD,NPA_SUB_OLD,AOD_DUE_DATE,
              LOANREST,OVER_FLOW,SCHEDULENO,NPACODE,STOCKSCHEME,SMS_ENROLLED,ATM_CARD_PERSONALISED,ATM_CARD_NONPERSONALISED,ATM_CARD_KCC,
              VBS_ADD_DATA_FLAG,LOCATION_STATUS,SIGNATURE_STATUS,KYC_FLAG,NPA_INOUT_FLAG,NPA_OUT_CLOSED_BAL,SW_FLAG,SW_REASON,SW_CRITICALAMOUNT,
              DATE_OF_BIRTH,MIN_DEMAND_DATE,INT_ON_IDMD_FLG,LR_FREQ_TYPE,NUM_OF_FLOWS,FLOW_START_DATE,FLOW_AMT,LR_INT_FREQ_TYPE,
              INTEREST_CALC_UPTO_DATE_CR,INTEREST_CALC_UPTO_DATE_DR,NEXT_INT_RUN_DATE_CR,NEXT_INT_RUN_DATE_DR,LIEN_ACID,REP_SHDL_DATE,EI_PERD_END_DATE,
              MOB_BANK_ENROLLMENT,QE_LAA_CRITICALAMOUNT,QE_LAA_REASON,DEPOSIT_AMOUNT,PMJDY_FLAG
        LIMIT 100;                  

        FOR H IN 1 .. SOL_ID.COUNT
        LOOP

            BACID(H)                        := NULL;                              
            EMP_ID(H)                       := NULL;                             
            GL_SUB_HEAD_CODE(H)             := '22090';                  
            ACCT_OWNERSHIP(H)               := NULL;                    
            SCHM_CODE(H)                    := 'BP';                         
            SCHM_TYPE(H)                    := 'BP';                          
            FREZ_CODE(H)                    := NULL;                         
            UN_CLR_BAL_AMT(H)               := 0;                     
            PARTITIONED_FLG(H)              := NULL;                    
            PARTITIONED_TYPE(H)             := NULL;                  
            GL_CODE(H)                      := '22';                           
            NEW_SCHM_TYPE(H)                := 'BP';                     
            INT_SUSPENSE(H)                 := 0;                       
            BSCHM_CODE(H)                   := 'BP';                         
            PURPOSE(H)                      := '211';                            
            SPECIAL_PROGRAMME(H)            := '10000';                  
            LBR_FIRST_DIGIT_CODE(H)         := 'OTH';              
            GUARANTEE_COVER_CODE(H)         := '999';              

            PERIODMM(H)                     := 0;                           
            SUBSIDY(H)                      := 0;                           
            EFF_BALANCE(H)                  := NULL;                        
            INSURANCE_CLAIM(H)              := 0;                   
            CGTMSE_CLAIM(H)                 := 0;                      
            SECURITYVALUE(H)                := 0;                      
            CGTMSE_GUARANTEE_COVER(H)       := 0;            
            KCCSCHEME(H)                    := 0;                          
            GOLDSCHEME(H)                   := 0;                         
            CCODSCHEME(H)                   := 0;                         
            VSLSCHEME(H)                    := 0;                         
            REPHASEDSCHEME(H)               := 0;                     
            DISBURSMENT(H)                  := NULL;                        
            ACCT_CLS_FLG(H)                 := NULL;                       
            ACCT_STATUS(H)                  := NULL;                        
            TD_PERIODMM(H)                  := NULL;                        
            TD_PERIODDD(H)                  := NULL;                        
            TD_OPEN_EFFECTIVE_DATE(H)       := NULL;             
            TD_MATURITY_DATE(H)             := NULL;                   
            TD_CONVERTED_PERIOD_TYPE(H)     := NULL;           
            TD_CONVERTED_PERIOD(H)          := NULL;                
            DEP_PREFERENTIAL_RATE(H)        := NULL;              
            DEP_INTEREST(H)                 := NULL;                       
            OPEN_COUNT(H)                   := NULL;                         
            OPEN_AMOUNT(H)                  := NULL;                        
            CLOSE_COUNT(H)                  := NULL;                        
            CLOSE_AMOUNT(H)                 := NULL;                       
            WEAKER_SECTION(H)               := NULL;                          
           
            IF ACCT_CLS_DATE(H) NOT BETWEEN BEGINDATE AND PROCESSDATE THEN

                ACCT_CLS_DATE(H)    := NULL;

            END IF;

            IF ACCT_CLS_DATE(H) IS NOT NULL THEN

                CLR_BAL_AMT(H)      := 0;                        

            ELSE               

                FOR CURREC IN (SELECT BILL_FUNC,AMOUNT
                                 FROM BEH
                                WHERE SOL_ID = SOL_ID(H)
                                  AND BILL_ID = FORACID(H)
                                  AND REVERSAL_FLG = 'N'
                                  AND VFD_BOD_DATE <= PROCESSDATE)
                LOOP

                    IF CURREC.BILL_FUNC = 'P' THEN

                        KCCSCHEME(H)   := 1;

                    END IF;                                           

                    IF CURREC.BILL_FUNC IN ('Z','G') THEN

                        CLR_BAL_AMT(H)  := NVL(CLR_BAL_AMT(H),0) + 0;                         

                    ELSIF CURREC.BILL_FUNC IN ('R','N') THEN

                        CLR_BAL_AMT(H)  := NVL(CLR_BAL_AMT(H),0) + (CURREC.AMOUNT * -1);                         

                    ELSE

                        CLR_BAL_AMT(H)  := NVL(CLR_BAL_AMT(H),0) + CURREC.AMOUNT;                         

                    END IF;                   

                END LOOP;                             

                IF KCCSCHEME(H) = 0 THEN

                    CLR_BAL_AMT(H)      := 0;                        

                END IF;

            END IF;

            IF CUST_ID(H) IS NOT NULL THEN

                BEGIN


                    SELECT REPLACE(REPLACE(CUST_NAME,CHR(13),''),CHR(10),''),CUST_SEX,NVL(CUST_CASTE_CODE,'OTH'),CUST_COMMU_CODE,CUST_TYPE_CODE,CUST_CONST,NAT_ID_CARD_NUM,PSPRT_NUM,PSPRT_DET,FREE_TEXT_5,PRIMARY_SOL_ID,PAN_GIR_NUM,CUST_PAGER_NO,DATE_OF_BIRTH
                      INTO CUST_NAME(H),GENDER(H),CASTE(H),RELIGION(H),CUSTOMERTYPE(H),CONSTITUTION(H),NAT_ID_CARD_NUM(H),PSPRT_NUM(H),PSPRT_DET(H),FREE_TEXT_5(H),PRIMARY_SOL_ID(H),PAN_GIR_NUM(H),CUST_PAGER_NO(H),DATE_OF_BIRTH(H)
                      FROM CMG
                     WHERE CUST_ID = CUST_ID(H);

                EXCEPTION
                     WHEN OTHERS THEN

                    SELECT NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
                      INTO CUST_NAME(H),GENDER(H),CASTE(H),RELIGION(H),CUSTOMERTYPE(H),CONSTITUTION(H),NAT_ID_CARD_NUM(H),PSPRT_NUM(H),PSPRT_DET(H),FREE_TEXT_5(H),PRIMARY_SOL_ID(H),PAN_GIR_NUM(H),CUST_PAGER_NO(H),DATE_OF_BIRTH(H)
                      FROM DUAL;

                END;

                BEGIN

                    SELECT FREE_CODE_1,FREE_CODE_4
                      INTO FREE_CODE_1(H),FREE_CODE_4(H)
                      FROM CEM
                     WHERE CUST_ID = CUST_ID(H);

                EXCEPTION
                     WHEN OTHERS THEN

                    SELECT NULL,NULL
                      INTO FREE_CODE_1(H),FREE_CODE_4(H)
                      FROM DUAL;

                END;

                IF CUST_PAGER_NO(H) IS NOT NULL THEN

                    IF LENGTH(CUST_PAGER_NO(H)) <> 10 THEN

                        CUST_PAGER_NO(H)    := NULL;

                    ELSIF PKGSMGBCOMMON.VALIDATENUMERICONLY(CUST_PAGER_NO(H)) = 1 THEN

                        CUST_PAGER_NO(H)    := NULL;

                    END IF;

                END IF;

                IF FREE_TEXT_5(H) IS NOT NULL THEN

                    IF LENGTH(FREE_TEXT_5(H)) <> 12 THEN

                        FREE_TEXT_5(H)    := NULL;

                    ELSIF PKGSMGBCOMMON.VALIDATEAADHAARNUMBER(FREE_TEXT_5(H)) = 'N' THEN

                        FREE_TEXT_5(H)    := NULL;

                    END IF;

                END IF;

                IF PAN_GIR_NUM(H) IS NOT NULL THEN

                    IF LENGTH(PAN_GIR_NUM(H)) <> 10 THEN

                        PAN_GIR_NUM(H)    := NULL;

                    ELSIF PKGSMGBCOMMON.VALIDATEPANNUMBER(PAN_GIR_NUM(H)) = 'N' THEN

                        PAN_GIR_NUM(H)    := NULL;

                    END IF;

                END IF;

            END IF;

            DUE_DATE(H)         := ACCT_OPN_DATE(H) + 15;                            
           
            BEGIN

                SELECT MAIN_CLASSIFICATION_USER,SUB_CLASSIFICATION_USER
                  INTO NPA_MAIN(H),NPA_SUB(H)
                  FROM ACH
                 WHERE B2K_TYPE = 'IBILL'
                   AND B2K_ID = ACID(H)
                   AND SRL_NUM = (SELECT MAX(A.SRL_NUM) FROM ACH A
                                   WHERE A.B2K_TYPE = 'IBILL'
                                     AND A.B2K_ID= ACID(H)
                                     AND A.USER_CLASSIFICATION_DATE <= PROCESSDATE);

            EXCEPTION
                 WHEN OTHERS THEN

                NPA_MAIN(H) := '001';
                NPA_SUB(H)  := '001';

            END;

            IF (NPA_MAIN(H) IS NULL OR NPA_MAIN(H) NOT IN ('001','002')) THEN

                NPA_SUB(H)          := '001';
                NPA_MAIN(H)         := '001';
                   
            END IF;

            IF NPA_MAIN(H) = '002' AND NPA_SUB(H) IS NULL THEN

                NPA_SUB(H)          := '002';

            END IF;

            IF NPA_MAIN(H) = '002' AND NPA_SUB(H) NOT IN ('002','003','004','005','006') THEN

                NPA_SUB(H)          := '002';

            END IF;

            IF NPA_MAIN(H) = '001' AND NPA_SUB(H) <> '001' THEN

                NPA_SUB(H)          := '001';

            END IF;

            IF NPA_MAIN(H) = '002' THEN

                BEGIN

                    SELECT USER_CLASSIFICATION_DATE
                     INTO DATE_OF_NPA(H)
                     FROM ACH
                    WHERE B2K_TYPE = 'IBILL'
                      AND B2K_ID = ACID(H)
                      AND SRL_NUM = (SELECT MAX(SRL_NUM) + 1
                                       FROM ACH
                                      WHERE B2K_ID= ACID(H)
                                        AND B2K_TYPE='IBILL'
                                        AND MAIN_CLASSIFICATION_USER = '001'
                                        AND USER_CLASSIFICATION_DATE <= PROCESSDATE);

                EXCEPTION
                     WHEN OTHERS THEN

                    BEGIN

                       SELECT MIN(USER_CLASSIFICATION_DATE)
                         INTO DATE_OF_NPA(H)
                         FROM ACH
                        WHERE B2K_TYPE = 'IBILL'
                          AND B2K_ID = ACID(H)
                          AND USER_CLASSIFICATION_DATE <= PROCESSDATE;

                    EXCEPTION
                         WHEN OTHERS THEN

                        DATE_OF_NPA(H):= ACCT_OPN_DATE(H);

                    END;

                END;

            END IF;

            BEGIN

                SELECT MAIN_PURPOSE_CODE,SECTOR_CODE,SUBSECTOR_CODE,SME_SECTOR_CODE,SME_SUB_SECTOR_CODE,TERM_CODE,
                       LBR_SECTOR_CODE,LBR_ACTIVITY_CODE,LBR_TYPE_OF_UNIT,LBR_3RD_DIGIT_CODE,BSR_OCCUPATION_CODE,
                       BSR_BORROWER_CODE,BSR_ITEM_CODE,BSR_TYPE_ACCOUNT_CODE             
                  INTO MAIN_PURPOSE_CODE(H),SECTOR_CODE(H),SUBSECTOR_CODE(H),SME_SECTOR_CODE(H),SME_SUB_SECTOR_CODE(H),TERM_CODE(H),
                       LBR_SECTOR_CODE(H),LBR_ACTIVITY_CODE(H),LBR_TYPE_OF_UNIT(H),LBR_3RD_DIGIT_CODE(H),BSR_OCCUPATION_CODE(H),
                       BSR_BORROWER_CODE(H),BSR_ITEM_CODE(H),BSR_TYPE_ACCOUNT_CODE(H)  
                  FROM C_MIS
                 WHERE SCHEME_CODE = 'BP'
                   AND SUB_PURPOSE = PURPOSE(H);

            EXCEPTION
                 WHEN OTHERS THEN

                SELECT MAIN_PURPOSE_CODE,SECTOR_CODE,SUBSECTOR_CODE,SME_SECTOR_CODE,SME_SUB_SECTOR_CODE,TERM_CODE,
                       LBR_SECTOR_CODE,LBR_ACTIVITY_CODE,LBR_TYPE_OF_UNIT,LBR_3RD_DIGIT_CODE,BSR_OCCUPATION_CODE,
                       BSR_BORROWER_CODE,BSR_ITEM_CODE,BSR_TYPE_ACCOUNT_CODE             
                  INTO MAIN_PURPOSE_CODE(H),SECTOR_CODE(H),SUBSECTOR_CODE(H),SME_SECTOR_CODE(H),SME_SUB_SECTOR_CODE(H),TERM_CODE(H),
                       LBR_SECTOR_CODE(H),LBR_ACTIVITY_CODE(H),LBR_TYPE_OF_UNIT(H),LBR_3RD_DIGIT_CODE(H),BSR_OCCUPATION_CODE(H),
                       BSR_BORROWER_CODE(H),BSR_ITEM_CODE(H),BSR_TYPE_ACCOUNT_CODE(H)  
                  FROM C_MIS
                 WHERE SCHEME_CODE = 'BP'
                   AND ROWNUM = 1;

            END;

            IF LBR_FIRST_DIGIT_CODE(H) IN ('SF','MF','AL') THEN

                WEAKER_SECTION(H) := 1; 

            ELSIF SPECIAL_PROGRAMME(H) IN (20019,20079,20059) THEN

                WEAKER_SECTION(H) := 1; 

            ELSIF SME_SUB_SECTOR_CODE(H) IN (1,2) AND SANCT_LIM(H) < 25000 THEN

                WEAKER_SECTION(H) := 1; 

            ELSIF SECTOR_CODE(H) = 2 AND CASTE(H) IN ('SC','ST') THEN

                WEAKER_SECTION(H) := 1; 

            --ELSIF SCHM_CODE(H) IN ('KCC02','LA234','LA235','LA236','LA237','OD108','OD109','OD110','OD111','LA140','LA141','LA142','LA143','OD113','LA229','DRI','RFGSP','RGCC','MERAA','MERAN','GRMAG','GRMOP','NRLCO','NRLCS','NRLTO','NRLTS','SHGTL','VATL','VAOD','SHGOD') THEN
            ELSIF KGBINSTR(WEAK_SECTION, SCHM_CODE(H)) = 1 THEN

                WEAKER_SECTION(H) := 1; 

            ELSIF SUBSECTOR_CODE(H) = 5 THEN

                WEAKER_SECTION(H) := 1; 

            ELSIF RELIGION(H) IN ('MUSLI','CHRIS','SIKHS','ZION','BUDHI') THEN

                WEAKER_SECTION(H) := 1; 

            END IF;

            CLR_BAL_AMT(H)                  := CLR_BAL_AMT(H) * -1;                         
            BOOK_BALANCE(H)                 := CLR_BAL_AMT(H);
            NET_BALANCE(H)                  := CLR_BAL_AMT(H);
            INTEREST_RATE(H)                := PKGSMGBCOMMON4.ADVANCEINTERESTRATE(ACID(H),SCHM_TYPE(H),PROCESSDATE,SANCT_LIM(H));
            
            IF SATURDAY_LASTDAY_FLAG = 'Y' THEN
               
                BAL_NET_OFF_SUBSIDY_CLAIMS(H)   := CLR_BAL_AMT(H);
                BAL_UNCOVERED(H)                := CLR_BAL_AMT(H);
                NPA_PROVISION(H)                := PKGSMGBCOMMON4.NPAPROVISION(SCHM_CODE(H),SME_SECTOR_CODE(H),NPA_SUB(H),BAL_NET_OFF_SUBSIDY_CLAIMS(H)*-1,SECURITYVALUE(H),BAL_UNCOVERED(H)*-1);

            END IF;
          
            IF DUE_DATE(H) <= PROCESSDATE AND ACCT_CLS_DATE(H) IS NULL THEN

                OVERDUE_NO(H)       := 1;
                OVERDUE_AMOUNT(H)   := CLR_BAL_AMT(H) * -1;
               
            ELSE                   

                OVERDUE_NO(H)       := 0;
                OVERDUE_AMOUNT(H)   := 0;

            END IF;

            IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

                IF ACCT_CLS_DATE(H) IS NOT NULL THEN

                    RECOVERY_AMOUNT(H)  := SANCT_LIM(H);

                ELSE

                    RECOVERY_AMOUNT(H)  := 0;

                END IF;

                DEMAND_AMOUNT(H)    := RECOVERY_AMOUNT(H) + OVERDUE_AMOUNT(H);

            ELSE

                RECOVERY_AMOUNT(H)      := 0;
                DEMAND_AMOUNT(H)        := 0;

            END IF;

            IF ACCT_OPN_DATE(H) BETWEEN BEGINDATE AND PROCESSDATE THEN

                DISBURSMENT_NO(H)  := 1;
                DISBURSMENT_AMT(H) := SANCT_LIM(H);

            ELSE

                DISBURSMENT_NO(H)  := 0;
                DISBURSMENT_AMT(H) := 0;

            END IF;

        END LOOP;

       FORALL H IN 1 .. SOL_ID.COUNT
       INSERT INTO C_BD (SOL_ID,GL_CODE,GL_SUB_HEAD_CODE,ACID,BACID,SCHM_TYPE,NEW_SCHM_TYPE,SCHM_CODE,BSCHM_CODE,FORACID,CUST_ID,CUST_NAME,
                          EMP_ID,ACCT_OWNERSHIP,PARTITIONED_FLG,PARTITIONED_TYPE,FREZ_CODE,ACCT_OPN_DATE,DUE_DATE,ACCT_CLS_DATE,SANCT_LIM,
                          PERIODMM,INTEREST_RATE,NPA_MAIN,NPA_SUB,DATE_OF_NPA,CLR_BAL_AMT,UN_CLR_BAL_AMT,BOOK_BALANCE,INT_SUSPENSE,NET_BALANCE,
                          SUBSIDY,INSURANCE_CLAIM,CGTMSE_CLAIM,BAL_NET_OFF_SUBSIDY_CLAIMS,SECURITYVALUE,CGTMSE_GUARANTEE_COVER,BAL_UNCOVERED,
                          NPA_PROVISION,PURPOSE,SPECIAL_PROGRAMME,LBR_FIRST_DIGIT_CODE,GUARANTEE_COVER_CODE,GENDER,CASTE,RELIGION,CUSTOMERTYPE,
                          CONSTITUTION,MAIN_PURPOSE_CODE,SECTOR_CODE,SUBSECTOR_CODE,SME_SECTOR_CODE,SME_SUB_SECTOR_CODE,TERM_CODE,LBR_SECTOR_CODE,
                          LBR_ACTIVITY_CODE,LBR_TYPE_OF_UNIT,LBR_3RD_DIGIT_CODE,BSR_OCCUPATION_CODE,BSR_BORROWER_CODE,BSR_ITEM_CODE,BSR_TYPE_ACCOUNT_CODE,
                          KCCSCHEME,GOLDSCHEME,CCODSCHEME,VSLSCHEME,REPHASEDSCHEME,ONLINEDATE,DISBURSMENT_NO,DISBURSMENT_AMT,DEMAND_AMOUNT,RECOVERY_AMOUNT,
                          OVERDUE_NO,OVERDUE_AMOUNT,ACCT_STATUS,TD_PERIODMM,TD_PERIODDD,TD_OPEN_EFFECTIVE_DATE,TD_MATURITY_DATE,TD_CONVERTED_PERIOD_TYPE,
                          TD_CONVERTED_PERIOD,DEP_PREFERENTIAL_RATE,OPEN_COUNT,OPEN_AMOUNT,CLOSE_COUNT,CLOSE_AMOUNT,WEAKER_SECTION,RONAME,DTNAME,
                          NAT_ID_CARD_NUM,PSPRT_NUM,PSPRT_DET,FREE_TEXT_5,PRIMARY_SOL_ID,PAN_GIR_NUM,CUST_PAGER_NO,FREE_CODE_1,FREE_CODE_4,
                          NPA_REASON,CRITICAL_AMOUNT,INDICATIVE_NPA_DATE,LOAN_REST,NPA_FLAG,NPA_MAIN_OLD,NPA_SUB_OLD,AOD_DUE_DATE,
                          LOANREST,OVER_FLOW,SCHEDULENO,NPACODE,STOCKSCHEME,SMS_ENROLLED,ATM_CARD_PERSONALISED,ATM_CARD_NONPERSONALISED,ATM_CARD_KCC,
                          VBS_ADD_DATA_FLAG,LOCATION_STATUS,SIGNATURE_STATUS,KYC_FLAG,NPA_INOUT_FLAG,NPA_OUT_CLOSED_BAL,SW_FLAG,SW_REASON,
                          SW_CRITICALAMOUNT,DATE_OF_BIRTH,MIN_DEMAND_DATE,INT_ON_IDMD_FLG,LR_FREQ_TYPE,NUM_OF_FLOWS,FLOW_START_DATE,
                          FLOW_AMT,LR_INT_FREQ_TYPE,INTEREST_CALC_UPTO_DATE_CR,INTEREST_CALC_UPTO_DATE_DR,NEXT_INT_RUN_DATE_CR,
                          NEXT_INT_RUN_DATE_DR,LIEN_ACID,REP_SHDL_DATE,EI_PERD_END_DATE,MOB_BANK_ENROLLMENT,QE_LAA_CRITICALAMOUNT,QE_LAA_REASON,DEPOSIT_AMOUNT,PMJDY_FLAG)
        SELECT SOL_ID(H),GL_CODE(H),GL_SUB_HEAD_CODE(H),ACID(H),BACID(H),SCHM_TYPE(H),NEW_SCHM_TYPE(H),SCHM_CODE(H),BSCHM_CODE(H),FORACID(H),CUST_ID(H),CUST_NAME(H),
               EMP_ID(H),ACCT_OWNERSHIP(H),PARTITIONED_FLG(H),PARTITIONED_TYPE(H),FREZ_CODE(H),ACCT_OPN_DATE(H),DUE_DATE(H),ACCT_CLS_DATE(H),SANCT_LIM(H),
               PERIODMM(H),INTEREST_RATE(H),NPA_MAIN(H),NPA_SUB(H),DATE_OF_NPA(H),CLR_BAL_AMT(H),UN_CLR_BAL_AMT(H),BOOK_BALANCE(H),INT_SUSPENSE(H),NET_BALANCE(H),
               SUBSIDY(H),INSURANCE_CLAIM(H),CGTMSE_CLAIM(H),BAL_NET_OFF_SUBSIDY_CLAIMS(H),SECURITYVALUE(H),CGTMSE_GUARANTEE_COVER(H),BAL_UNCOVERED(H),
               NPA_PROVISION(H),PURPOSE(H),SPECIAL_PROGRAMME(H),LBR_FIRST_DIGIT_CODE(H),GUARANTEE_COVER_CODE(H),GENDER(H),CASTE(H),RELIGION(H),CUSTOMERTYPE(H),
               CONSTITUTION(H),MAIN_PURPOSE_CODE(H),SECTOR_CODE(H),SUBSECTOR_CODE(H),SME_SECTOR_CODE(H),SME_SUB_SECTOR_CODE(H),TERM_CODE(H),LBR_SECTOR_CODE(H),
               LBR_ACTIVITY_CODE(H),LBR_TYPE_OF_UNIT(H),LBR_3RD_DIGIT_CODE(H),BSR_OCCUPATION_CODE(H),BSR_BORROWER_CODE(H),BSR_ITEM_CODE(H),BSR_TYPE_ACCOUNT_CODE(H),
               KCCSCHEME(H),GOLDSCHEME(H),CCODSCHEME(H),VSLSCHEME(H),REPHASEDSCHEME(H),ONLINEDATE,DISBURSMENT_NO(H),DISBURSMENT_AMT(H),DEMAND_AMOUNT(H),RECOVERY_AMOUNT(H),
               OVERDUE_NO(H),OVERDUE_AMOUNT(H),ACCT_STATUS(H),TD_PERIODMM(H),TD_PERIODDD(H),TD_OPEN_EFFECTIVE_DATE(H),TD_MATURITY_DATE(H),TD_CONVERTED_PERIOD_TYPE(H),
               TD_CONVERTED_PERIOD(H),DEP_PREFERENTIAL_RATE(H),OPEN_COUNT(H),OPEN_AMOUNT(H),CLOSE_COUNT(H),CLOSE_AMOUNT(H),WEAKER_SECTION(H),RONAME,DTNAME,
               NAT_ID_CARD_NUM(H),PSPRT_NUM(H),PSPRT_DET(H),FREE_TEXT_5(H),PRIMARY_SOL_ID(H),PAN_GIR_NUM(H),CUST_PAGER_NO(H),FREE_CODE_1(H),FREE_CODE_4(H),
               NPA_REASON(H),CRITICAL_AMOUNT(H),INDICATIVE_NPA_DATE(H),LOAN_REST(H),NPA_FLAG(H),NPA_MAIN_OLD(H),NPA_SUB_OLD(H),AOD_DUE_DATE(H),
               LOANREST(H),OVER_FLOW(H),SCHEDULENO(H),NPACODE(H),STOCKSCHEME(H),SMS_ENROLLED(H),ATM_CARD_PERSONALISED(H),ATM_CARD_NONPERSONALISED(H),ATM_CARD_KCC(H),
               VBS_ADD_DATA_FLAG(H),LOCATION_STATUS(H),SIGNATURE_STATUS(H),KYC_FLAG(H),NPA_INOUT_FLAG(H),NPA_OUT_CLOSED_BAL(H),SW_FLAG(H),SW_REASON(H),
               SW_CRITICALAMOUNT(H),DATE_OF_BIRTH(H),MIN_DEMAND_DATE(H),INT_ON_IDMD_FLG(H),LR_FREQ_TYPE(H),NUM_OF_FLOWS(H),FLOW_START_DATE(H),
               FLOW_AMT(H),LR_INT_FREQ_TYPE(H),INTEREST_CALC_UPTO_DATE_CR(H),INTEREST_CALC_UPTO_DATE_DR(H),NEXT_INT_RUN_DATE_CR(H),NEXT_INT_RUN_DATE_DR(H),
               LIEN_ACID(H),REP_SHDL_DATE(H),EI_PERD_END_DATE(H),MOB_BANK_ENROLLMENT(H),QE_LAA_CRITICALAMOUNT(H),QE_LAA_REASON(H),DEPOSIT_AMOUNT(H),PMJDY_FLAG(H)
          FROM DUAL;              
       COMMIT;

        EXIT WHEN BILLSPURCHASED%NOTFOUND;

    END LOOP;
    CLOSE BILLSPURCHASED;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),3 FROM DUAL;
    COMMIT;          

--    PKGSPECIALINFORMATION.NPA (GSOLID, QUARTERENDDATE, 'B');

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),4 FROM DUAL;
    COMMIT;          

    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

        PKGSPECIALWATCHACCOUNTNEW.SW (GSOLID, PROCESSDATE,1,999999999999,'B');

    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),5 FROM DUAL;
    COMMIT;          

    PKGSMGBCOMMON4.BSMARCHDATA1 (GSOLID,PROCESSDATE);

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),6 FROM DUAL;
    COMMIT;          

    PKGSMGBCOMMON4.BSMARCHDATA2 (GSOLID,PROCESSDATE);

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),7 FROM DUAL;
    COMMIT;          

--    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

    PKGSMGBCOMMON4.BSMARCHDATA3 (GSOLID,PROCESSDATE);

--    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),8 FROM DUAL;
    COMMIT;          

    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

        PKGSMGBCOMMON4.BSMARCHDATA4 (GSOLID,PROCESSDATE);

    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),9 FROM DUAL;
    COMMIT;          

    PKGSMGBCOMMON4.BD_GL (GSOLID,PROCESSDATE);

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),10 FROM DUAL;
    COMMIT;          

    PKGSMGBCOMMON4.BD_ADV (GSOLID,PROCESSDATE);

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),11 FROM DUAL;
    COMMIT;          

    PKGSMGBCOMMON4.BD_DEP (GSOLID,PROCESSDATE);

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),12 FROM DUAL;
    COMMIT;          

    PKGSMGBCOMMON4.INSERT_TO_C_BASEDATA (GSOLID,PROCESSDATE);

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),13 FROM DUAL;
    COMMIT;

    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

        PKGSMGBCOMMON6.CLIENTELE_BASE (GSOLID,PROCESSDATE);

    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),14 FROM DUAL;
    COMMIT;          

    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

        PKGSMGBCOMMON6.ATM (GSOLID,PROCESSDATE);

    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),15 FROM DUAL;
    COMMIT;          

--    PKGSMGBCOMMON4.PREVIOUS_DAY_NPA_MOVEMENT (GSOLID,PROCESSDATE);

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),16 FROM DUAL;
    COMMIT;          

--    PKGSMGBCOMMON4.PREVIOUS_DAY_NPA_PNPA_ACCOUNTS (GSOLID,PROCESSDATE);

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),17 FROM DUAL;
    COMMIT;          

    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

        PKGSMGBCOMMON4.KYC (GSOLID,PROCESSDATE);

    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),18 FROM DUAL;
    COMMIT;          

    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

        PKGSMGBCOMMON4.SIGNSCAN (GSOLID,PROCESSDATE);

    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),19 FROM DUAL;
    COMMIT;          

    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

        PKGSMGBCOMMON4.LOCATION1 (GSOLID,PROCESSDATE);

    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),20 FROM DUAL;
    COMMIT;          

    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

        PKGSMGBCOMMON4.VBSADDDATA (GSOLID,PROCESSDATE);

    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),21 FROM DUAL;
    COMMIT;          

    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

        PKGSMGBCOMMON4.SMS (GSOLID,PROCESSDATE);

    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),22 FROM DUAL;
    COMMIT;          

    PKGSMGBCOMMON4.AADHAAR (GSOLID,PROCESSDATE);

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),23 FROM DUAL;
    COMMIT;          

    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

        PKGSMGBCOMMON4.LOANSOPENED (GSOLID,PROCESSDATE);

    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),24 FROM DUAL;
    COMMIT;          

    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

        PKGSMGBCOMMON4.AOD (GSOLID,CURRENTDATE);

    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),25 FROM DUAL;
    COMMIT;          

--    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN
--
--        PKGSMGBCOMMON4.QTR_END_PNPA_SMGB_FIRST_STYLE (GSOLID,PROCESSDATE);
--
--    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),26 FROM DUAL;
    COMMIT;          

    -- Commented as the data is fetched from pre day end check procedure

--    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN
--
--        PKGSMGBCOMMON4.CIBIL_IN (GSOLID,PROCESSDATE);
--
--    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),27 FROM DUAL;
    COMMIT;          

    PKGSMGBCOMMON4.BG_BALANCING (GSOLID,PROCESSDATE);

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),28 FROM DUAL;
    COMMIT;          

    PKGSMGBCOMMON4.PARTITION_BALANCING (GSOLID,PROCESSDATE);

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),29 FROM DUAL;
    COMMIT;          

    PKGSMGBCOMMON4.POINTING_BALANCING (GSOLID,PROCESSDATE);

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),30 FROM DUAL;
    COMMIT;          

    PKGSMGBCOMMON4.BA_BALANCING (GSOLID,PROCESSDATE);

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),31 FROM DUAL;
    COMMIT;          

    PKGSMGBCOMMON4.BILLS_BALANCING (GSOLID,PROCESSDATE);    

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),32 FROM DUAL;
    COMMIT;          

    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

        PKGSMGBCOMMON4.CERSAI_PEND (GSOLID,PROCESSDATE);

    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),33 FROM DUAL;
    COMMIT;          

--        PKGSMGBCOMMON4.FRESH_NPA (GSOLID,PROCESSDATE);

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),34 FROM DUAL;
    COMMIT;          

--        PKGSMGBCOMMON4.PNPA_CRITICAL (GSOLID,PROCESSDATE);

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),35 FROM DUAL;
    COMMIT;          

    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

        PKGSMGBCOMMON4.LOAN_LESSINTRST (GSOLID,PROCESSDATE);

    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),36 FROM DUAL;
    COMMIT;          

    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

        PKGSMGBCOMMON4.DEP_PREFINTRST (GSOLID,PROCESSDATE);

    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),37 FROM DUAL;
    COMMIT;          

    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

        PKGSMGBCOMMON4.CASHPOSITION (GSOLID,PROCESSDATE);

    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),38 FROM DUAL;
    COMMIT;          

    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

        PKGSMGBCOMMON4.SRM_EM_PEND (GSOLID,PROCESSDATE);

    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),39 FROM DUAL;
    COMMIT;          

    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

        PKGSMGBCOMMON4.INT_ON_INT_DMD_N (GSOLID,PROCESSDATE);

    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),40 FROM DUAL;
    COMMIT;          

    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

        PKGSMGBCOMMON4.SECURITY_MISSING (GSOLID,PROCESSDATE);

    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),41 FROM DUAL;
    COMMIT;          

    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

        PKGSMGBCOMMON4.VSL_ISSUES (GSOLID,PROCESSDATE);

    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),42 FROM DUAL;
    COMMIT;          

    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

        PKGSMGBCOMMON4.VBS_RESCHEDULE (GSOLID,PROCESSDATE);

    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),43 FROM DUAL;
    COMMIT;          

    -- Commented as the data is fetched from pre day end check procedure

--    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN
--
--        PKGSMGBCOMMON4.CIBIL_NI (GSOLID,PROCESSDATE);
--
--    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),44 FROM DUAL;
    COMMIT;          

    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

        PKGSMGBCOMMON4.CGTMSE (GSOLID,PROCESSDATE);

    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),45 FROM DUAL;
    COMMIT;          

    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

        PKGCERSAI_UPLOAD_ERROR_DATA.PROCESS(GSOLID,999999,'T','FRAN1875',2);  

    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),46 FROM DUAL;
    COMMIT;          

    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

        PKGSMGBCOMMON6.GOLD_OVERDUE (GSOLID,PROCESSDATE);

    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),47 FROM DUAL;
    COMMIT;          

--    PKGSMGBCOMMON6.GOLD_NPA_INOUT (GSOLID,PROCESSDATE);
    
    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),48 FROM DUAL;
    COMMIT;          

--    PKGSMGBCOMMON6.SASL_POOLING (GSOLID,PROCESSDATE);
    
    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),49 FROM DUAL;
    COMMIT;          

--    PKGSMGBCOMMON6.GOLD_OVERDUE_1 (GSOLID,PROCESSDATE);

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),50 FROM DUAL;
    COMMIT;          

--    PKGSMGBCOMMON6.GRIHODAYA_CAMP (GSOLID,PROCESSDATE);

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),51 FROM DUAL;
    COMMIT;          

    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

        PKGSMGBCOMMON6.DBTL_REG (GSOLID,PROCESSDATE);

    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),52 FROM DUAL;
    COMMIT;          

    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN

        PKGSMGBCOMMON6.JUNIOR_ATM (GSOLID,PROCESSDATE);

    END IF;
    
    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),53 FROM DUAL;
    COMMIT;          

--    PKGSMGBCOMMON6.AADHAAR (GSOLID,PROCESSDATE);

--    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN
--
--        PKGSMGBCOMMON6.PMJJBY_PMSBY_APY (GSOLID,PROCESSDATE);
--
--    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),54 FROM DUAL;
    COMMIT;          

--    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN
--
--        PKGSMGBCOMMON6.AGRI_TERM_LOANS (GSOLID,PROCESSDATE);
--
--    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),55 FROM DUAL;
    COMMIT;          

    PKGSMGBCOMMON6.PRE_DAY_END_CHECK (GSOLID,PROCESSDATE);

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),56 FROM DUAL;
    COMMIT;          

--    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN
--
--        PKGSMGBCOMMON6.PMJDY (GSOLID,PROCESSDATE);
--
--    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),57 FROM DUAL;
    COMMIT;          

--    IF SATURDAY_LASTDAY_FLAG = 'Y' THEN
--
--        PKGSMGBCOMMON6.PMJDYOD (GSOLID,PROCESSDATE);
--
--    END IF;

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),58 FROM DUAL;
    COMMIT;          

    PKGSMGBCOMMON6.SUIT (GSOLID,PROCESSDATE);

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),59 FROM DUAL;
    COMMIT;          

    PKGSMGBCOMMON6.SARFAESI_ACTION (GSOLID,PROCESSDATE);

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),60 FROM DUAL;
    COMMIT;
    
    PKGSMGBCOMMON4.BUS_FIG_UPDATE (GSOLID,PROCESSDATE);
    
    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),61 FROM DUAL;
    COMMIT;    
    
    --PKGSMGBCOMMON4.GC_PENDING_DATA(GSOLID,PROCESSDATE);
    
    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),62 FROM DUAL;
    COMMIT;    

    --PKGSMGBCOMMON6.PROFIT_LOSS (GSOLID,PROCESSDATE);
    
    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),63 FROM DUAL;
    COMMIT;    

    PKGSMGBCOMMON4.BD_TARGETS (GSOLID,PROCESSDATE);
    
    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),64 FROM DUAL;
    COMMIT;    

    PKGSMGBCOMMON4.BD_LOCKERSTATUS (GSOLID,PROCESSDATE);
    
    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),65 FROM DUAL;
    COMMIT;    

    PKGSMGBCOMMON4.BD_LPDSTATUS (GSOLID,PROCESSDATE);
    
    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),66 FROM DUAL;
    COMMIT;    

    PKGSMGBCOMMON4.SL_SA_BA_BILLS_PENDING (GSOLID,PROCESSDATE);

    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD1',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),99 FROM DUAL;
    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD2',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),1 FROM DUAL;
    INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_NUMBER1)  SELECT 'BD2',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),99 FROM DUAL;
    COMMIT;          

RETURN;

EXCEPTION
WHEN OTHERS THEN
VARERROR := VARERROR || ' -- '|| UPPER(SQLERRM);
INSERT INTO C_TEMPDATA (TD_PROCESSID,TD_SOLID,TD_TEXT1,TD_MEMO1)  SELECT 'BD1_ERROR',GSOLID,TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS'),VARERROR FROM DUAL;
COMMIT;

END PROCESS;

END;
/
DROP PUBLIC SYNONYM PKGBASEDATANEW
/
CREATE PUBLIC SYNONYM PKGBASEDATANEW FOR PKGBASEDATANEW
/
GRANT EXECUTE ON PKGBASEDATANEW TO TBAGEN, TBAUTIL,TBACUST
/
GRANT EXECUTE ON PKGBASEDATANEW TO PUBLIC
/
